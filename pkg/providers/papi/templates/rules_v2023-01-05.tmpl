{{- /*gotype: github.com/akamai/cli-terraform/pkg/providers/papi.TFData*/ -}}


{{- define "Criteria"}}
	{{- if eq .Name "advancedImMatch"}}{{- template "advancedImMatch" .}}{{- end}}
	{{- if eq .Name "bucket"}}{{- template "bucket" .}}{{- end}}
	{{- if eq .Name "cacheability"}}{{- template "cacheability" .}}{{- end}}
	{{- if eq .Name "chinaCdnRegion"}}{{- template "chinaCdnRegion" .}}{{- end}}
	{{- if eq .Name "clientCertificate"}}{{- template "clientCertificate" .}}{{- end}}
	{{- if eq .Name "clientIp"}}{{- template "clientIp" .}}{{- end}}
	{{- if eq .Name "clientIpVersion"}}{{- template "clientIpVersion" .}}{{- end}}
	{{- if eq .Name "cloudletsOrigin"}}{{- template "cloudletsOrigin" .}}{{- end}}
	{{- if eq .Name "contentDeliveryNetwork"}}{{- template "contentDeliveryNetwork" .}}{{- end}}
	{{- if eq .Name "contentType"}}{{- template "contentType" .}}{{- end}}
	{{- if eq .Name "deviceCharacteristic"}}{{- template "deviceCharacteristic" .}}{{- end}}
	{{- if eq .Name "ecmdAuthGroups"}}{{- template "ecmdAuthGroups" .}}{{- end}}
	{{- if eq .Name "ecmdAuthScheme"}}{{- template "ecmdAuthScheme" .}}{{- end}}
	{{- if eq .Name "ecmdIsAuthenticated"}}{{- template "ecmdIsAuthenticated" .}}{{- end}}
	{{- if eq .Name "ecmdUsername"}}{{- template "ecmdUsername" .}}{{- end}}
	{{- if eq .Name "edgeWorkersFailure"}}{{- template "edgeWorkersFailure" .}}{{- end}}
	{{- if eq .Name "fileExtension"}}{{- template "fileExtension" .}}{{- end}}
	{{- if eq .Name "filename"}}{{- template "filename" .}}{{- end}}
	{{- if eq .Name "hostname"}}{{- template "hostname" .}}{{- end}}
	{{- if eq .Name "matchAdvanced"}}{{- template "matchAdvanced" .}}{{- end}}
	{{- if eq .Name "matchCpCode"}}{{- template "matchCpCode" .}}{{- end}}
	{{- if eq .Name "matchResponseCode"}}{{- template "matchResponseCode" .}}{{- end}}
	{{- if eq .Name "matchVariable"}}{{- template "matchVariable" .}}{{- end}}
	{{- if eq .Name "metadataStage"}}{{- template "metadataStage" .}}{{- end}}
	{{- if eq .Name "originTimeout"}}{{- template "originTimeout" .}}{{- end}}
	{{- if eq .Name "path"}}{{- template "path" .}}{{- end}}
	{{- if eq .Name "queryStringParameter"}}{{- template "queryStringParameter" .}}{{- end}}
	{{- if eq .Name "random"}}{{- template "random" .}}{{- end}}
	{{- if eq .Name "recoveryConfig"}}{{- template "recoveryConfig" .}}{{- end}}
	{{- if eq .Name "regularExpression"}}{{- template "regularExpression" .}}{{- end}}
	{{- if eq .Name "requestCookie"}}{{- template "requestCookie" .}}{{- end}}
	{{- if eq .Name "requestHeader"}}{{- template "requestHeader" .}}{{- end}}
	{{- if eq .Name "requestMethod"}}{{- template "requestMethod" .}}{{- end}}
	{{- if eq .Name "requestProtocol"}}{{- template "requestProtocol" .}}{{- end}}
	{{- if eq .Name "requestType"}}{{- template "requestType" .}}{{- end}}
	{{- if eq .Name "responseHeader"}}{{- template "responseHeader" .}}{{- end}}
	{{- if eq .Name "time"}}{{- template "time" .}}{{- end}}
	{{- if eq .Name "tokenAuthorization"}}{{- template "tokenAuthorization" .}}{{- end}}
	{{- if eq .Name "userAgent"}}{{- template "userAgent" .}}{{- end}}
	{{- if eq .Name "userLocation"}}{{- template "userLocation" .}}{{- end}}
	{{- if eq .Name "userNetwork"}}{{- template "userNetwork" .}}{{- end}}
	{{- if eq .Name "variableError"}}{{- template "variableError" .}}{{- end}}
	{{- if eq .Name "virtualWaitingRoomRequest"}}{{- template "virtualWaitingRoomRequest" .}}{{- end}}
	{{- if eq .Name "visitorPrioritizationRequest"}}{{- template "visitorPrioritizationRequest" .}}{{- end}}
{{- end}}

{{- define "Behavior"}}
	{{- if eq .Name "adScalerCircuitBreaker"}}{{- template "adScalerCircuitBreaker" .}}{{- end}}
	{{- if eq .Name "adaptiveAcceleration"}}{{- template "adaptiveAcceleration" .}}{{- end}}
	{{- if eq .Name "adaptiveImageCompression"}}{{- template "adaptiveImageCompression" .}}{{- end}}
	{{- if eq .Name "advanced"}}{{- template "advanced" .}}{{- end}}
	{{- if eq .Name "aggregatedReporting"}}{{- template "aggregatedReporting" .}}{{- end}}
	{{- if eq .Name "akamaizer"}}{{- template "akamaizer" .}}{{- end}}
	{{- if eq .Name "akamaizerTag"}}{{- template "akamaizerTag" .}}{{- end}}
	{{- if eq .Name "allHttpInCacheHierarchy"}}{{- template "allHttpInCacheHierarchy" .}}{{- end}}
	{{- if eq .Name "allowCloudletsOrigins"}}{{- template "allowCloudletsOrigins" .}}{{- end}}
	{{- if eq .Name "allowDelete"}}{{- template "allowDelete" .}}{{- end}}
	{{- if eq .Name "allowHTTPSCacheKeySharing"}}{{- template "allowHTTPSCacheKeySharing" .}}{{- end}}
	{{- if eq .Name "allowHTTPSDowngrade"}}{{- template "allowHTTPSDowngrade" .}}{{- end}}
	{{- if eq .Name "allowOptions"}}{{- template "allowOptions" .}}{{- end}}
	{{- if eq .Name "allowPatch"}}{{- template "allowPatch" .}}{{- end}}
	{{- if eq .Name "allowPost"}}{{- template "allowPost" .}}{{- end}}
	{{- if eq .Name "allowPut"}}{{- template "allowPut" .}}{{- end}}
	{{- if eq .Name "allowTransferEncoding"}}{{- template "allowTransferEncoding" .}}{{- end}}
	{{- if eq .Name "altSvcHeader"}}{{- template "altSvcHeader" .}}{{- end}}
	{{- if eq .Name "apiPrioritization"}}{{- template "apiPrioritization" .}}{{- end}}
	{{- if eq .Name "applicationLoadBalancer"}}{{- template "applicationLoadBalancer" .}}{{- end}}
	{{- if eq .Name "audienceSegmentation"}}{{- template "audienceSegmentation" .}}{{- end}}
	{{- if eq .Name "autoDomainValidation"}}{{- template "autoDomainValidation" .}}{{- end}}
	{{- if eq .Name "baseDirectory"}}{{- template "baseDirectory" .}}{{- end}}
	{{- if eq .Name "bossBeaconing"}}{{- template "bossBeaconing" .}}{{- end}}
	{{- if eq .Name "breadcrumbs"}}{{- template "breadcrumbs" .}}{{- end}}
	{{- if eq .Name "breakConnection"}}{{- template "breakConnection" .}}{{- end}}
	{{- if eq .Name "brotli"}}{{- template "brotli" .}}{{- end}}
	{{- if eq .Name "cacheError"}}{{- template "cacheError" .}}{{- end}}
	{{- if eq .Name "cacheId"}}{{- template "cacheId" .}}{{- end}}
	{{- if eq .Name "cacheKeyIgnoreCase"}}{{- template "cacheKeyIgnoreCase" .}}{{- end}}
	{{- if eq .Name "cacheKeyQueryParams"}}{{- template "cacheKeyQueryParams" .}}{{- end}}
	{{- if eq .Name "cacheKeyRewrite"}}{{- template "cacheKeyRewrite" .}}{{- end}}
	{{- if eq .Name "cachePost"}}{{- template "cachePost" .}}{{- end}}
	{{- if eq .Name "cacheRedirect"}}{{- template "cacheRedirect" .}}{{- end}}
	{{- if eq .Name "cacheTag"}}{{- template "cacheTag" .}}{{- end}}
	{{- if eq .Name "cacheTagVisible"}}{{- template "cacheTagVisible" .}}{{- end}}
	{{- if eq .Name "caching"}}{{- template "caching" .}}{{- end}}
	{{- if eq .Name "centralAuthorization"}}{{- template "centralAuthorization" .}}{{- end}}
	{{- if eq .Name "chaseRedirects"}}{{- template "chaseRedirects" .}}{{- end}}
	{{- if eq .Name "clientCharacteristics"}}{{- template "clientCharacteristics" .}}{{- end}}
	{{- if eq .Name "cloudInterconnects"}}{{- template "cloudInterconnects" .}}{{- end}}
	{{- if eq .Name "cloudWrapper"}}{{- template "cloudWrapper" .}}{{- end}}
	{{- if eq .Name "cloudWrapperAdvanced"}}{{- template "cloudWrapperAdvanced" .}}{{- end}}
	{{- if eq .Name "conditionalOrigin"}}{{- template "conditionalOrigin" .}}{{- end}}
	{{- if eq .Name "constructResponse"}}{{- template "constructResponse" .}}{{- end}}
	{{- if eq .Name "contentCharacteristics"}}{{- template "contentCharacteristics" .}}{{- end}}
	{{- if eq .Name "contentCharacteristicsAMD"}}{{- template "contentCharacteristicsAMD" .}}{{- end}}
	{{- if eq .Name "contentCharacteristicsDD"}}{{- template "contentCharacteristicsDD" .}}{{- end}}
	{{- if eq .Name "contentCharacteristicsWsdLargeFile"}}{{- template "contentCharacteristicsWsdLargeFile" .}}{{- end}}
	{{- if eq .Name "contentCharacteristicsWsdLive"}}{{- template "contentCharacteristicsWsdLive" .}}{{- end}}
	{{- if eq .Name "contentCharacteristicsWsdVod"}}{{- template "contentCharacteristicsWsdVod" .}}{{- end}}
	{{- if eq .Name "contentPrePosition"}}{{- template "contentPrePosition" .}}{{- end}}
	{{- if eq .Name "contentTargetingProtection"}}{{- template "contentTargetingProtection" .}}{{- end}}
	{{- if eq .Name "corsSupport"}}{{- template "corsSupport" .}}{{- end}}
	{{- if eq .Name "cpCode"}}{{- template "cpCode" .}}{{- end}}
	{{- if eq .Name "customBehavior"}}{{- template "customBehavior" .}}{{- end}}
	{{- if eq .Name "datastream"}}{{- template "datastream" .}}{{- end}}
	{{- if eq .Name "dcp"}}{{- template "dcp" .}}{{- end}}
	{{- if eq .Name "dcpAuthHMACTransformation"}}{{- template "dcpAuthHMACTransformation" .}}{{- end}}
	{{- if eq .Name "dcpAuthRegexTransformation"}}{{- template "dcpAuthRegexTransformation" .}}{{- end}}
	{{- if eq .Name "dcpAuthSubstringTransformation"}}{{- template "dcpAuthSubstringTransformation" .}}{{- end}}
	{{- if eq .Name "dcpAuthVariableExtractor"}}{{- template "dcpAuthVariableExtractor" .}}{{- end}}
	{{- if eq .Name "dcpDefaultAuthzGroups"}}{{- template "dcpDefaultAuthzGroups" .}}{{- end}}
	{{- if eq .Name "dcpDevRelations"}}{{- template "dcpDevRelations" .}}{{- end}}
	{{- if eq .Name "dcpRealTimeAuth"}}{{- template "dcpRealTimeAuth" .}}{{- end}}
	{{- if eq .Name "deliveryReceipt"}}{{- template "deliveryReceipt" .}}{{- end}}
	{{- if eq .Name "denyAccess"}}{{- template "denyAccess" .}}{{- end}}
	{{- if eq .Name "denyDirectFailoverAccess"}}{{- template "denyDirectFailoverAccess" .}}{{- end}}
	{{- if eq .Name "deviceCharacteristicCacheId"}}{{- template "deviceCharacteristicCacheId" .}}{{- end}}
	{{- if eq .Name "deviceCharacteristicHeader"}}{{- template "deviceCharacteristicHeader" .}}{{- end}}
	{{- if eq .Name "dnsAsyncRefresh"}}{{- template "dnsAsyncRefresh" .}}{{- end}}
	{{- if eq .Name "dnsPrefresh"}}{{- template "dnsPrefresh" .}}{{- end}}
	{{- if eq .Name "downgradeProtocol"}}{{- template "downgradeProtocol" .}}{{- end}}
	{{- if eq .Name "downloadCompleteMarker"}}{{- template "downloadCompleteMarker" .}}{{- end}}
	{{- if eq .Name "downloadNotification"}}{{- template "downloadNotification" .}}{{- end}}
	{{- if eq .Name "downstreamCache"}}{{- template "downstreamCache" .}}{{- end}}
	{{- if eq .Name "dynamicThroughtputOptimization"}}{{- template "dynamicThroughtputOptimization" .}}{{- end}}
	{{- if eq .Name "dynamicThroughtputOptimizationOverride"}}{{- template "dynamicThroughtputOptimizationOverride" .}}{{- end}}
	{{- if eq .Name "dynamicWebContent"}}{{- template "dynamicWebContent" .}}{{- end}}
	{{- if eq .Name "ecmsBulkUpload"}}{{- template "ecmsBulkUpload" .}}{{- end}}
	{{- if eq .Name "ecmsDatabase"}}{{- template "ecmsDatabase" .}}{{- end}}
	{{- if eq .Name "ecmsDataset"}}{{- template "ecmsDataset" .}}{{- end}}
	{{- if eq .Name "ecmsObjectKey"}}{{- template "ecmsObjectKey" .}}{{- end}}
	{{- if eq .Name "edgeConnect"}}{{- template "edgeConnect" .}}{{- end}}
	{{- if eq .Name "edgeLoadBalancingAdvanced"}}{{- template "edgeLoadBalancingAdvanced" .}}{{- end}}
	{{- if eq .Name "edgeLoadBalancingDataCenter"}}{{- template "edgeLoadBalancingDataCenter" .}}{{- end}}
	{{- if eq .Name "edgeLoadBalancingOrigin"}}{{- template "edgeLoadBalancingOrigin" .}}{{- end}}
	{{- if eq .Name "edgeOriginAuthorization"}}{{- template "edgeOriginAuthorization" .}}{{- end}}
	{{- if eq .Name "edgeRedirector"}}{{- template "edgeRedirector" .}}{{- end}}
	{{- if eq .Name "edgeScape"}}{{- template "edgeScape" .}}{{- end}}
	{{- if eq .Name "edgeSideIncludes"}}{{- template "edgeSideIncludes" .}}{{- end}}
	{{- if eq .Name "edgeWorker"}}{{- template "edgeWorker" .}}{{- end}}
	{{- if eq .Name "enhancedAkamaiProtocol"}}{{- template "enhancedAkamaiProtocol" .}}{{- end}}
	{{- if eq .Name "enhancedProxyDetection"}}{{- template "enhancedProxyDetection" .}}{{- end}}
	{{- if eq .Name "epdForwardHeaderEnrichment"}}{{- template "epdForwardHeaderEnrichment" .}}{{- end}}
	{{- if eq .Name "failAction"}}{{- template "failAction" .}}{{- end}}
	{{- if eq .Name "failoverBotManagerFeatureCompatibility"}}{{- template "failoverBotManagerFeatureCompatibility" .}}{{- end}}
	{{- if eq .Name "fastInvalidate"}}{{- template "fastInvalidate" .}}{{- end}}
	{{- if eq .Name "firstPartyMarketing"}}{{- template "firstPartyMarketing" .}}{{- end}}
	{{- if eq .Name "firstPartyMarketingPlus"}}{{- template "firstPartyMarketingPlus" .}}{{- end}}
	{{- if eq .Name "forwardRewrite"}}{{- template "forwardRewrite" .}}{{- end}}
	{{- if eq .Name "frontEndOptimization"}}{{- template "frontEndOptimization" .}}{{- end}}
	{{- if eq .Name "g2oheader"}}{{- template "g2oheader" .}}{{- end}}
	{{- if eq .Name "globalRequestNumber"}}{{- template "globalRequestNumber" .}}{{- end}}
	{{- if eq .Name "graphqlCaching"}}{{- template "graphqlCaching" .}}{{- end}}
	{{- if eq .Name "gzipResponse"}}{{- template "gzipResponse" .}}{{- end}}
	{{- if eq .Name "hdDataAdvanced"}}{{- template "hdDataAdvanced" .}}{{- end}}
	{{- if eq .Name "healthDetection"}}{{- template "healthDetection" .}}{{- end}}
	{{- if eq .Name "hsafEipBinding"}}{{- template "hsafEipBinding" .}}{{- end}}
	{{- if eq .Name "http2"}}{{- template "http2" .}}{{- end}}
	{{- if eq .Name "http3"}}{{- template "http3" .}}{{- end}}
	{{- if eq .Name "httpStrictTransportSecurity"}}{{- template "httpStrictTransportSecurity" .}}{{- end}}
	{{- if eq .Name "httpToHttpsUpgrade"}}{{- template "httpToHttpsUpgrade" .}}{{- end}}
	{{- if eq .Name "imOverride"}}{{- template "imOverride" .}}{{- end}}
	{{- if eq .Name "imageAndVideoManager"}}{{- template "imageAndVideoManager" .}}{{- end}}
	{{- if eq .Name "imageManager"}}{{- template "imageManager" .}}{{- end}}
	{{- if eq .Name "imageManagerVideo"}}{{- template "imageManagerVideo" .}}{{- end}}
	{{- if eq .Name "include"}}{{- template "include" .}}{{- end}}
	{{- if eq .Name "inputValidation"}}{{- template "inputValidation" .}}{{- end}}
	{{- if eq .Name "instant"}}{{- template "instant" .}}{{- end}}
	{{- if eq .Name "instantConfig"}}{{- template "instantConfig" .}}{{- end}}
	{{- if eq .Name "largeFileOptimization"}}{{- template "largeFileOptimization" .}}{{- end}}
	{{- if eq .Name "largeFileOptimizationAdvanced"}}{{- template "largeFileOptimizationAdvanced" .}}{{- end}}
	{{- if eq .Name "limitBitRate"}}{{- template "limitBitRate" .}}{{- end}}
	{{- if eq .Name "logCustom"}}{{- template "logCustom" .}}{{- end}}
	{{- if eq .Name "mPulse"}}{{- template "mPulse" .}}{{- end}}
	{{- if eq .Name "manifestPersonalization"}}{{- template "manifestPersonalization" .}}{{- end}}
	{{- if eq .Name "manifestRerouting"}}{{- template "manifestRerouting" .}}{{- end}}
	{{- if eq .Name "manualServerPush"}}{{- template "manualServerPush" .}}{{- end}}
	{{- if eq .Name "mediaAcceleration"}}{{- template "mediaAcceleration" .}}{{- end}}
	{{- if eq .Name "mediaAccelerationQuicOptout"}}{{- template "mediaAccelerationQuicOptout" .}}{{- end}}
	{{- if eq .Name "mediaClient"}}{{- template "mediaClient" .}}{{- end}}
	{{- if eq .Name "mediaFileRetrievalOptimization"}}{{- template "mediaFileRetrievalOptimization" .}}{{- end}}
	{{- if eq .Name "mediaOriginFailover"}}{{- template "mediaOriginFailover" .}}{{- end}}
	{{- if eq .Name "metadataCaching"}}{{- template "metadataCaching" .}}{{- end}}
	{{- if eq .Name "mobileSdkPerformance"}}{{- template "mobileSdkPerformance" .}}{{- end}}
	{{- if eq .Name "modifyIncomingRequestHeader"}}{{- template "modifyIncomingRequestHeader" .}}{{- end}}
	{{- if eq .Name "modifyIncomingResponseHeader"}}{{- template "modifyIncomingResponseHeader" .}}{{- end}}
	{{- if eq .Name "modifyOutgoingRequestHeader"}}{{- template "modifyOutgoingRequestHeader" .}}{{- end}}
	{{- if eq .Name "modifyOutgoingResponseHeader"}}{{- template "modifyOutgoingResponseHeader" .}}{{- end}}
	{{- if eq .Name "modifyViaHeader"}}{{- template "modifyViaHeader" .}}{{- end}}
	{{- if eq .Name "origin"}}{{- template "origin" .}}{{- end}}
	{{- if eq .Name "originCharacteristics"}}{{- template "originCharacteristics" .}}{{- end}}
	{{- if eq .Name "originCharacteristicsWsd"}}{{- template "originCharacteristicsWsd" .}}{{- end}}
	{{- if eq .Name "originFailureRecoveryMethod"}}{{- template "originFailureRecoveryMethod" .}}{{- end}}
	{{- if eq .Name "originFailureRecoveryPolicy"}}{{- template "originFailureRecoveryPolicy" .}}{{- end}}
	{{- if eq .Name "originIpAcl"}}{{- template "originIpAcl" .}}{{- end}}
	{{- if eq .Name "persistentClientConnection"}}{{- template "persistentClientConnection" .}}{{- end}}
	{{- if eq .Name "persistentConnection"}}{{- template "persistentConnection" .}}{{- end}}
	{{- if eq .Name "personallyIdentifiableInformation"}}{{- template "personallyIdentifiableInformation" .}}{{- end}}
	{{- if eq .Name "phasedRelease"}}{{- template "phasedRelease" .}}{{- end}}
	{{- if eq .Name "preconnect"}}{{- template "preconnect" .}}{{- end}}
	{{- if eq .Name "predictiveContentDelivery"}}{{- template "predictiveContentDelivery" .}}{{- end}}
	{{- if eq .Name "predictivePrefetching"}}{{- template "predictivePrefetching" .}}{{- end}}
	{{- if eq .Name "prefetch"}}{{- template "prefetch" .}}{{- end}}
	{{- if eq .Name "prefetchable"}}{{- template "prefetchable" .}}{{- end}}
	{{- if eq .Name "prefreshCache"}}{{- template "prefreshCache" .}}{{- end}}
	{{- if eq .Name "quality"}}{{- template "quality" .}}{{- end}}
	{{- if eq .Name "quicBeta"}}{{- template "quicBeta" .}}{{- end}}
	{{- if eq .Name "randomSeek"}}{{- template "randomSeek" .}}{{- end}}
	{{- if eq .Name "rapid"}}{{- template "rapid" .}}{{- end}}
	{{- if eq .Name "readTimeout"}}{{- template "readTimeout" .}}{{- end}}
	{{- if eq .Name "realTimeReporting"}}{{- template "realTimeReporting" .}}{{- end}}
	{{- if eq .Name "realUserMonitoring"}}{{- template "realUserMonitoring" .}}{{- end}}
	{{- if eq .Name "redirect"}}{{- template "redirect" .}}{{- end}}
	{{- if eq .Name "redirectplus"}}{{- template "redirectplus" .}}{{- end}}
	{{- if eq .Name "refererChecking"}}{{- template "refererChecking" .}}{{- end}}
	{{- if eq .Name "removeQueryParameter"}}{{- template "removeQueryParameter" .}}{{- end}}
	{{- if eq .Name "removeVary"}}{{- template "removeVary" .}}{{- end}}
	{{- if eq .Name "report"}}{{- template "report" .}}{{- end}}
	{{- if eq .Name "requestControl"}}{{- template "requestControl" .}}{{- end}}
	{{- if eq .Name "requestTypeMarker"}}{{- template "requestTypeMarker" .}}{{- end}}
	{{- if eq .Name "resourceOptimizer"}}{{- template "resourceOptimizer" .}}{{- end}}
	{{- if eq .Name "resourceOptimizerExtendedCompatibility"}}{{- template "resourceOptimizerExtendedCompatibility" .}}{{- end}}
	{{- if eq .Name "responseCode"}}{{- template "responseCode" .}}{{- end}}
	{{- if eq .Name "responseCookie"}}{{- template "responseCookie" .}}{{- end}}
	{{- if eq .Name "restrictObjectCaching"}}{{- template "restrictObjectCaching" .}}{{- end}}
	{{- if eq .Name "returnCacheStatus"}}{{- template "returnCacheStatus" .}}{{- end}}
	{{- if eq .Name "rewriteUrl"}}{{- template "rewriteUrl" .}}{{- end}}
	{{- if eq .Name "rumCustom"}}{{- template "rumCustom" .}}{{- end}}
	{{- if eq .Name "saasDefinitions"}}{{- template "saasDefinitions" .}}{{- end}}
	{{- if eq .Name "salesForceCommerceCloudClient"}}{{- template "salesForceCommerceCloudClient" .}}{{- end}}
	{{- if eq .Name "salesForceCommerceCloudProvider"}}{{- template "salesForceCommerceCloudProvider" .}}{{- end}}
	{{- if eq .Name "salesForceCommerceCloudProviderHostHeader"}}{{- template "salesForceCommerceCloudProviderHostHeader" .}}{{- end}}
	{{- if eq .Name "savePostDcaProcessing"}}{{- template "savePostDcaProcessing" .}}{{- end}}
	{{- if eq .Name "scheduleInvalidation"}}{{- template "scheduleInvalidation" .}}{{- end}}
	{{- if eq .Name "scriptManagement"}}{{- template "scriptManagement" .}}{{- end}}
	{{- if eq .Name "segmentedContentProtection"}}{{- template "segmentedContentProtection" .}}{{- end}}
	{{- if eq .Name "segmentedMediaOptimization"}}{{- template "segmentedMediaOptimization" .}}{{- end}}
	{{- if eq .Name "segmentedMediaStreamingPrefetch"}}{{- template "segmentedMediaStreamingPrefetch" .}}{{- end}}
	{{- if eq .Name "setVariable"}}{{- template "setVariable" .}}{{- end}}
	{{- if eq .Name "shutr"}}{{- template "shutr" .}}{{- end}}
	{{- if eq .Name "simulateErrorCode"}}{{- template "simulateErrorCode" .}}{{- end}}
	{{- if eq .Name "siteShield"}}{{- template "siteShield" .}}{{- end}}
	{{- if eq .Name "standardTLSMigration"}}{{- template "standardTLSMigration" .}}{{- end}}
	{{- if eq .Name "standardTLSMigrationOverride"}}{{- template "standardTLSMigrationOverride" .}}{{- end}}
	{{- if eq .Name "strictHeaderParsing"}}{{- template "strictHeaderParsing" .}}{{- end}}
	{{- if eq .Name "subCustomer"}}{{- template "subCustomer" .}}{{- end}}
	{{- if eq .Name "sureRoute"}}{{- template "sureRoute" .}}{{- end}}
	{{- if eq .Name "tcpOptimization"}}{{- template "tcpOptimization" .}}{{- end}}
	{{- if eq .Name "teaLeaf"}}{{- template "teaLeaf" .}}{{- end}}
	{{- if eq .Name "tieredDistribution"}}{{- template "tieredDistribution" .}}{{- end}}
	{{- if eq .Name "tieredDistributionAdvanced"}}{{- template "tieredDistributionAdvanced" .}}{{- end}}
	{{- if eq .Name "tieredDistributionCustomization"}}{{- template "tieredDistributionCustomization" .}}{{- end}}
	{{- if eq .Name "timeout"}}{{- template "timeout" .}}{{- end}}
	{{- if eq .Name "uidConfiguration"}}{{- template "uidConfiguration" .}}{{- end}}
	{{- if eq .Name "validateEntityTag"}}{{- template "validateEntityTag" .}}{{- end}}
	{{- if eq .Name "verifyJsonWebToken"}}{{- template "verifyJsonWebToken" .}}{{- end}}
	{{- if eq .Name "verifyJsonWebTokenForDcp"}}{{- template "verifyJsonWebTokenForDcp" .}}{{- end}}
	{{- if eq .Name "verifyTokenAuthorization"}}{{- template "verifyTokenAuthorization" .}}{{- end}}
	{{- if eq .Name "virtualWaitingRoom"}}{{- template "virtualWaitingRoom" .}}{{- end}}
	{{- if eq .Name "virtualWaitingRoomWithEdgeWorkers"}}{{- template "virtualWaitingRoomWithEdgeWorkers" .}}{{- end}}
	{{- if eq .Name "visitorPrioritization"}}{{- template "visitorPrioritization" .}}{{- end}}
	{{- if eq .Name "visitorPrioritizationFifo"}}{{- template "visitorPrioritizationFifo" .}}{{- end}}
	{{- if eq .Name "visitorPrioritizationFifoStandalone"}}{{- template "visitorPrioritizationFifoStandalone" .}}{{- end}}
	{{- if eq .Name "watermarking"}}{{- template "watermarking" .}}{{- end}}
	{{- if eq .Name "webApplicationFirewall"}}{{- template "webApplicationFirewall" .}}{{- end}}
	{{- if eq .Name "webSockets"}}{{- template "webSockets" .}}{{- end}}
	{{- if eq .Name "webdav"}}{{- template "webdav" .}}{{- end}}
{{- end}}


{{- define "adScalerCircuitBreaker"}}
ad_scaler_circuit_breaker {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "responseDelayBased") (ne $v nil)}}
		response_delay_based = {{$v}}
{{- end}}
{{- if and (eq $k "responseDelayThreshold") (ne $v nil)}}
		response_delay_threshold = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "responseCodeBased") (ne $v nil)}}
		response_code_based = {{$v}}
{{- end}}
{{- if and (eq $k "responseCodes") (ne $v nil)}}
		response_codes = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "fallbackActionResponseCodeBased") (ne $v nil)}}
		fallback_action_response_code_based = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "returnErrorResponseCodeBased") (ne $v nil)}}
		return_error_response_code_based = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "specifyYourOwnResponseCodeBased") (ne $v nil)}}
		specify_your_own_response_code_based = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "adaptiveAcceleration"}}
adaptive_acceleration {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "source") (ne $v nil)}}
		source = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "titleHttp2ServerPush") (ne $v nil)}}
		title_http2_server_push = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enablePush") (ne $v nil)}}
		enable_push = {{$v}}
{{- end}}
{{- if and (eq $k "titlePreconnect") (ne $v nil)}}
		title_preconnect = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enablePreconnect") (ne $v nil)}}
		enable_preconnect = {{$v}}
{{- end}}
{{- if and (eq $k "titlePreload") (ne $v nil)}}
		title_preload = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "preloadEnable") (ne $v nil)}}
		preload_enable = {{$v}}
{{- end}}
{{- if and (eq $k "abTesting") (ne $v nil)}}
		ab_testing = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "abLogic") (ne $v nil)}}
		ab_logic = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "cookieName") (ne $v nil)}}
		cookie_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "compression") (ne $v nil)}}
		compression = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "titleRo") (ne $v nil)}}
		title_ro = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableRo") (ne $v nil)}}
		enable_ro = {{$v}}
{{- end}}
{{- if and (eq $k "titleBrotli") (ne $v nil)}}
		title_brotli = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableBrotliCompression") (ne $v nil)}}
		enable_brotli_compression = {{$v}}
{{- end}}
{{- if and (eq $k "enableForNoncacheable") (ne $v nil)}}
		enable_for_noncacheable = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "adaptiveImageCompression"}}
adaptive_image_compression {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "title_aic_mobile") (ne $v nil)}}
		title_aic_mobile = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "compressMobile") (ne $v nil)}}
		compress_mobile = {{$v}}
{{- end}}
{{- if and (eq $k "tier1MobileCompressionMethod") (ne $v nil)}}
		tier1_mobile_compression_method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "tier1MobileCompressionValue") (ne $v nil)}}
		tier1_mobile_compression_value = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "tier2MobileCompressionMethod") (ne $v nil)}}
		tier2_mobile_compression_method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "tier2MobileCompressionValue") (ne $v nil)}}
		tier2_mobile_compression_value = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "tier3MobileCompressionMethod") (ne $v nil)}}
		tier3_mobile_compression_method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "tier3MobileCompressionValue") (ne $v nil)}}
		tier3_mobile_compression_value = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "title_aic_nonmobile") (ne $v nil)}}
		title_aic_nonmobile = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "compressStandard") (ne $v nil)}}
		compress_standard = {{$v}}
{{- end}}
{{- if and (eq $k "tier1StandardCompressionMethod") (ne $v nil)}}
		tier1_standard_compression_method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "tier1StandardCompressionValue") (ne $v nil)}}
		tier1_standard_compression_value = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "tier2StandardCompressionMethod") (ne $v nil)}}
		tier2_standard_compression_method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "tier2StandardCompressionValue") (ne $v nil)}}
		tier2_standard_compression_value = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "tier3StandardCompressionMethod") (ne $v nil)}}
		tier3_standard_compression_method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "tier3StandardCompressionValue") (ne $v nil)}}
		tier3_standard_compression_value = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "advanced"}}
advanced {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "xml") (ne $v nil)}}
		xml = <<EOT
{{$v}}
%{~if false}trim redundant new line%{endif~}
EOT
{{- end}}
{{- end}}
}
{{- end}}
{{- define "aggregatedReporting"}}
aggregated_reporting {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "reportName") (ne $v nil)}}
		report_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "attributesCount") (ne $v nil)}}
		attributes_count = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "attribute1") (ne $v nil)}}
		attribute1 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "attribute2") (ne $v nil)}}
		attribute2 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "attribute3") (ne $v nil)}}
		attribute3 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "attribute4") (ne $v nil)}}
		attribute4 = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "akamaizer"}}
akamaizer {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "akamaizerTag"}}
akamaizer_tag {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchHostname") (ne $v nil)}}
		match_hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "replacementHostname") (ne $v nil)}}
		replacement_hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "scope") (ne $v nil)}}
		scope = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "tagsAttribute") (ne $v nil)}}
		tags_attribute = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "replaceAll") (ne $v nil)}}
		replace_all = {{$v}}
{{- end}}
{{- if and (eq $k "includeTagsAttribute") (ne $v nil)}}
		include_tags_attribute = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "allHttpInCacheHierarchy"}}
all_http_in_cache_hierarchy {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "allowCloudletsOrigins"}}
allow_cloudlets_origins {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "honorBaseDirectory") (ne $v nil)}}
		honor_base_directory = {{$v}}
{{- end}}
{{- if and (eq $k "purgeOriginQueryParameter") (ne $v nil)}}
		purge_origin_query_parameter = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "allowDelete"}}
allow_delete {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "allowBody") (ne $v nil)}}
		allow_body = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "allowHTTPSCacheKeySharing"}}
allow_https_cache_key_sharing {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "allowHTTPSDowngrade"}}
allow_https_downgrade {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "allowOptions"}}
allow_options {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "allowPatch"}}
allow_patch {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "allowPost"}}
allow_post {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "allowWithoutContentLength") (ne $v nil)}}
		allow_without_content_length = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "allowPut"}}
allow_put {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "allowTransferEncoding"}}
allow_transfer_encoding {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "altSvcHeader"}}
alt_svc_header {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "maxAge") (ne $v nil)}}
		max_age = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "apiPrioritization"}}
api_prioritization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "label") (ne $v nil)}}
		label = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useThrottledCpCode") (ne $v nil)}}
		use_throttled_cp_code = {{$v}}
{{- end}}
{{- if eq $k "throttledCpCode" }}
		{{- if $v}}
		throttled_cp_code {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "useThrottledStatusCode") (ne $v nil)}}
		use_throttled_status_code = {{$v}}
{{- end}}
{{- if and (eq $k "throttledStatusCode") (ne $v nil)}}
		throttled_status_code = {{$v | AsInt}}
{{- end}}
{{- if eq $k "netStorage" }}
		{{- if $v}}
		net_storage {
{{- range $k, $v := $v}}
{{- if and (eq $k "cpCode") (ne $v nil)}}
		cp_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "downloadDomainName") (ne $v nil)}}
		download_domain_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "g2oToken") (ne $v nil)}}
		g2o_token = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "netStoragePath") (ne $v nil)}}
		net_storage_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "alternateResponseCacheTtl") (ne $v nil)}}
		alternate_response_cache_ttl = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "applicationLoadBalancer"}}
application_load_balancer {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "label") (ne $v nil)}}
		label = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "stickinessTitle") (ne $v nil)}}
		stickiness_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "stickinessCookieType") (ne $v nil)}}
		stickiness_cookie_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "stickinessExpirationDate") (ne $v nil)}}
		stickiness_expiration_date = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "stickinessDuration") (ne $v nil)}}
		stickiness_duration = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "stickinessRefresh") (ne $v nil)}}
		stickiness_refresh = {{$v}}
{{- end}}
{{- if and (eq $k "originCookieName") (ne $v nil)}}
		origin_cookie_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "specifyStickinessCookieDomain") (ne $v nil)}}
		specify_stickiness_cookie_domain = {{$v}}
{{- end}}
{{- if and (eq $k "stickinessCookieDomain") (ne $v nil)}}
		stickiness_cookie_domain = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "stickinessCookieAutomaticSalt") (ne $v nil)}}
		stickiness_cookie_automatic_salt = {{$v}}
{{- end}}
{{- if and (eq $k "stickinessCookieSalt") (ne $v nil)}}
		stickiness_cookie_salt = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "stickinessCookieSetHttpOnlyFlag") (ne $v nil)}}
		stickiness_cookie_set_http_only_flag = {{$v}}
{{- end}}
{{- if and (eq $k "allDownTitle") (ne $v nil)}}
		all_down_title = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "allDownNetStorage" }}
		{{- if $v}}
		all_down_net_storage {
{{- range $k, $v := $v}}
{{- if and (eq $k "cpCode") (ne $v nil)}}
		cp_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "downloadDomainName") (ne $v nil)}}
		download_domain_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "g2oToken") (ne $v nil)}}
		g2o_token = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "allDownNetStorageFile") (ne $v nil)}}
		all_down_net_storage_file = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allDownStatusCode") (ne $v nil)}}
		all_down_status_code = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "failoverTitle") (ne $v nil)}}
		failover_title = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "failoverStatusCodes"}}
		failover_status_codes = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "failoverMode") (ne $v nil)}}
		failover_mode = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "failoverOriginMap" }}
		{{- range $v := $v}}
		failover_origin_map {
{{- range $k, $v := $v}}
{{- if and (eq $k "fromOriginId") (ne $v nil)}}
		from_origin_id = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "toOriginIds"}}
		to_origin_ids = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
		}
{{- end}}
{{- end}}
{{- if and (eq $k "failoverAttemptsThreshold") (ne $v nil)}}
		failover_attempts_threshold = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "cachedContentTitle") (ne $v nil)}}
		cached_content_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowCachePrefresh") (ne $v nil)}}
		allow_cache_prefresh = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "audienceSegmentation"}}
audience_segmentation {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "isSharedPolicy") (ne $v nil)}}
		is_shared_policy = {{$v}}
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "cloudletSharedPolicy") (ne $v nil)}}
		cloudlet_shared_policy = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "label") (ne $v nil)}}
		label = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentTrackingTitle") (ne $v nil)}}
		segment_tracking_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentTrackingMethod") (ne $v nil)}}
		segment_tracking_method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentTrackingQueryParam") (ne $v nil)}}
		segment_tracking_query_param = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentTrackingCookieName") (ne $v nil)}}
		segment_tracking_cookie_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentTrackingCustomHeader") (ne $v nil)}}
		segment_tracking_custom_header = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationTitle") (ne $v nil)}}
		population_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationCookieType") (ne $v nil)}}
		population_cookie_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationDuration") (ne $v nil)}}
		population_duration = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationRefresh") (ne $v nil)}}
		population_refresh = {{$v}}
{{- end}}
{{- if and (eq $k "specifyPopulationCookieDomain") (ne $v nil)}}
		specify_population_cookie_domain = {{$v}}
{{- end}}
{{- if and (eq $k "populationCookieDomain") (ne $v nil)}}
		population_cookie_domain = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationCookieAutomaticSalt") (ne $v nil)}}
		population_cookie_automatic_salt = {{$v}}
{{- end}}
{{- if and (eq $k "populationCookieSalt") (ne $v nil)}}
		population_cookie_salt = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationCookieIncludeRuleName") (ne $v nil)}}
		population_cookie_include_rule_name = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "autoDomainValidation"}}
auto_domain_validation {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "autodv") (ne $v nil)}}
		autodv = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "baseDirectory"}}
base_directory {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "bossBeaconing"}}
boss_beaconing {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "cpcodes") (ne $v nil)}}
		cpcodes = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "requestType") (ne $v nil)}}
		request_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "forwardType") (ne $v nil)}}
		forward_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "samplingFrequency") (ne $v nil)}}
		sampling_frequency = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "conditionalSamplingFrequency") (ne $v nil)}}
		conditional_sampling_frequency = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "conditionalHTTPStatus"}}
		conditional_http_status = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "conditionalErrorPattern") (ne $v nil)}}
		conditional_error_pattern = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "breadcrumbs"}}
breadcrumbs {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "optMode") (ne $v nil)}}
		opt_mode = {{$v}}
{{- end}}
{{- if and (eq $k "loggingEnabled") (ne $v nil)}}
		logging_enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "breakConnection"}}
break_connection {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "brotli"}}
brotli {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cacheError"}}
cache_error {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "ttl") (ne $v nil)}}
		ttl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "preserveStale") (ne $v nil)}}
		preserve_stale = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cacheId"}}
cache_id {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "rule") (ne $v nil)}}
		rule = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "includeValue") (ne $v nil)}}
		include_value = {{$v}}
{{- end}}
{{- if and (eq $k "optional") (ne $v nil)}}
		optional = {{$v}}
{{- end}}
{{- if eq $k "elements"}}
		elements = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "variableName") (ne $v nil)}}
		variable_name = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cacheKeyIgnoreCase"}}
cache_key_ignore_case {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cacheKeyQueryParams"}}
cache_key_query_params {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "behavior") (ne $v nil)}}
		behavior = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "parameters"}}
		parameters = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "exactMatch") (ne $v nil)}}
		exact_match = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cacheKeyRewrite"}}
cache_key_rewrite {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "purgeKey") (ne $v nil)}}
		purge_key = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cachePost"}}
cache_post {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "useBody") (ne $v nil)}}
		use_body = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cacheRedirect"}}
cache_redirect {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cacheTag"}}
cache_tag {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "tag") (ne $v nil)}}
		tag = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cacheTagVisible"}}
cache_tag_visible {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "behavior") (ne $v nil)}}
		behavior = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "caching"}}
caching {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "behavior") (ne $v nil)}}
		behavior = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "mustRevalidate") (ne $v nil)}}
		must_revalidate = {{$v}}
{{- end}}
{{- if and (eq $k "ttl") (ne $v nil)}}
		ttl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "defaultTtl") (ne $v nil)}}
		default_ttl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "cacheControlDirectives") (ne $v nil)}}
		cache_control_directives = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enhancedRfcSupport") (ne $v nil)}}
		enhanced_rfc_support = {{$v}}
{{- end}}
{{- if and (eq $k "cacheabilitySettings") (ne $v nil)}}
		cacheability_settings = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "honorNoStore") (ne $v nil)}}
		honor_no_store = {{$v}}
{{- end}}
{{- if and (eq $k "honorPrivate") (ne $v nil)}}
		honor_private = {{$v}}
{{- end}}
{{- if and (eq $k "honorNoCache") (ne $v nil)}}
		honor_no_cache = {{$v}}
{{- end}}
{{- if and (eq $k "expirationSettings") (ne $v nil)}}
		expiration_settings = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "honorMaxAge") (ne $v nil)}}
		honor_max_age = {{$v}}
{{- end}}
{{- if and (eq $k "honorSMaxage") (ne $v nil)}}
		honor_s_maxage = {{$v}}
{{- end}}
{{- if and (eq $k "revalidationSettings") (ne $v nil)}}
		revalidation_settings = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "honorMustRevalidate") (ne $v nil)}}
		honor_must_revalidate = {{$v}}
{{- end}}
{{- if and (eq $k "honorProxyRevalidate") (ne $v nil)}}
		honor_proxy_revalidate = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "centralAuthorization"}}
central_authorization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "chaseRedirects"}}
chase_redirects {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "serve404") (ne $v nil)}}
		serve404 = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "clientCharacteristics"}}
client_characteristics {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "country") (ne $v nil)}}
		country = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cloudInterconnects"}}
cloud_interconnects {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if eq $k "cloudLocations"}}
		cloud_locations = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cloudWrapper"}}
cloud_wrapper {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "location") (ne $v nil)}}
		location = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cloudWrapperAdvanced"}}
cloud_wrapper_advanced {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "failoverMap") (ne $v nil)}}
		failover_map = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customFailoverMap") (ne $v nil)}}
		custom_failover_map = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "conditionalOrigin"}}
conditional_origin {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "originId") (ne $v nil)}}
		origin_id = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "constructResponse"}}
construct_response {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "body") (ne $v nil)}}
		body = <<EOT
{{$v}}
%{~if false}trim redundant new line%{endif~}
EOT
{{- end}}
{{- if and (eq $k "responseCode") (ne $v nil)}}
		response_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "forceEviction") (ne $v nil)}}
		force_eviction = {{$v}}
{{- end}}
{{- if and (eq $k "ignorePurge") (ne $v nil)}}
		ignore_purge = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "contentCharacteristics"}}
content_characteristics {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "objectSize") (ne $v nil)}}
		object_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "popularityDistribution") (ne $v nil)}}
		popularity_distribution = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "catalogSize") (ne $v nil)}}
		catalog_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "contentType") (ne $v nil)}}
		content_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "contentCharacteristicsAMD"}}
content_characteristics_amd {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "catalogSize") (ne $v nil)}}
		catalog_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "contentType") (ne $v nil)}}
		content_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "popularityDistribution") (ne $v nil)}}
		popularity_distribution = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hls") (ne $v nil)}}
		hls = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationHLS") (ne $v nil)}}
		segment_duration_hls = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentDurationHLSCustom") (ne $v nil)}}
		segment_duration_hls_custom = {{$v}}
{{- end}}
{{- if and (eq $k "segmentSizeHLS") (ne $v nil)}}
		segment_size_hls = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hds") (ne $v nil)}}
		hds = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationHDS") (ne $v nil)}}
		segment_duration_hds = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentDurationHDSCustom") (ne $v nil)}}
		segment_duration_hds_custom = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "segmentSizeHDS") (ne $v nil)}}
		segment_size_hds = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "dash") (ne $v nil)}}
		dash = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationDASH") (ne $v nil)}}
		segment_duration_dash = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentDurationDASHCustom") (ne $v nil)}}
		segment_duration_dash_custom = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "segmentSizeDASH") (ne $v nil)}}
		segment_size_dash = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "smooth") (ne $v nil)}}
		smooth = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationSmooth") (ne $v nil)}}
		segment_duration_smooth = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentDurationSmoothCustom") (ne $v nil)}}
		segment_duration_smooth_custom = {{$v}}
{{- end}}
{{- if and (eq $k "segmentSizeSmooth") (ne $v nil)}}
		segment_size_smooth = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "contentCharacteristicsDD"}}
content_characteristics_dd {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "objectSize") (ne $v nil)}}
		object_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "popularityDistribution") (ne $v nil)}}
		popularity_distribution = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "catalogSize") (ne $v nil)}}
		catalog_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "contentType") (ne $v nil)}}
		content_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "optimizeOption") (ne $v nil)}}
		optimize_option = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "contentCharacteristicsWsdLargeFile"}}
content_characteristics_wsd_large_file {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "objectSize") (ne $v nil)}}
		object_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "popularityDistribution") (ne $v nil)}}
		popularity_distribution = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "catalogSize") (ne $v nil)}}
		catalog_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "contentType") (ne $v nil)}}
		content_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "contentCharacteristicsWsdLive"}}
content_characteristics_wsd_live {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "catalogSize") (ne $v nil)}}
		catalog_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "contentType") (ne $v nil)}}
		content_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "popularityDistribution") (ne $v nil)}}
		popularity_distribution = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hls") (ne $v nil)}}
		hls = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationHLS") (ne $v nil)}}
		segment_duration_hls = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentSizeHLS") (ne $v nil)}}
		segment_size_hls = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hds") (ne $v nil)}}
		hds = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationHDS") (ne $v nil)}}
		segment_duration_hds = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentSizeHDS") (ne $v nil)}}
		segment_size_hds = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "dash") (ne $v nil)}}
		dash = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationDASH") (ne $v nil)}}
		segment_duration_dash = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentSizeDASH") (ne $v nil)}}
		segment_size_dash = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "smooth") (ne $v nil)}}
		smooth = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationSmooth") (ne $v nil)}}
		segment_duration_smooth = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentSizeSmooth") (ne $v nil)}}
		segment_size_smooth = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "contentCharacteristicsWsdVod"}}
content_characteristics_wsd_vod {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "catalogSize") (ne $v nil)}}
		catalog_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "contentType") (ne $v nil)}}
		content_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "popularityDistribution") (ne $v nil)}}
		popularity_distribution = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hls") (ne $v nil)}}
		hls = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationHLS") (ne $v nil)}}
		segment_duration_hls = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentSizeHLS") (ne $v nil)}}
		segment_size_hls = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hds") (ne $v nil)}}
		hds = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationHDS") (ne $v nil)}}
		segment_duration_hds = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentSizeHDS") (ne $v nil)}}
		segment_size_hds = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "dash") (ne $v nil)}}
		dash = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationDASH") (ne $v nil)}}
		segment_duration_dash = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentSizeDASH") (ne $v nil)}}
		segment_size_dash = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "smooth") (ne $v nil)}}
		smooth = {{$v}}
{{- end}}
{{- if and (eq $k "segmentDurationSmooth") (ne $v nil)}}
		segment_duration_smooth = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentSizeSmooth") (ne $v nil)}}
		segment_size_smooth = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "contentPrePosition"}}
content_pre_position {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "sourceType") (ne $v nil)}}
		source_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "targets") (ne $v nil)}}
		targets = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "firstLocation") (ne $v nil)}}
		first_location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "secondLocation") (ne $v nil)}}
		second_location = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "contentTargetingProtection"}}
content_targeting_protection {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "geoProtectionTitle") (ne $v nil)}}
		geo_protection_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableGeoProtection") (ne $v nil)}}
		enable_geo_protection = {{$v}}
{{- end}}
{{- if and (eq $k "geoProtectionMode") (ne $v nil)}}
		geo_protection_mode = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "countries"}}
		countries = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "regions"}}
		regions = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "dmas"}}
		dmas = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "overrideIPAddresses"}}
		override_ip_addresses = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "enableGeoRedirectOnDeny") (ne $v nil)}}
		enable_geo_redirect_on_deny = {{$v}}
{{- end}}
{{- if and (eq $k "geoRedirectUrl") (ne $v nil)}}
		geo_redirect_url = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "ipProtectionTitle") (ne $v nil)}}
		ip_protection_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableIPProtection") (ne $v nil)}}
		enable_ip_protection = {{$v}}
{{- end}}
{{- if and (eq $k "ipProtectionMode") (ne $v nil)}}
		ip_protection_mode = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "ipAddresses"}}
		ip_addresses = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "enableIPRedirectOnDeny") (ne $v nil)}}
		enable_ip_redirect_on_deny = {{$v}}
{{- end}}
{{- if and (eq $k "ipRedirectUrl") (ne $v nil)}}
		ip_redirect_url = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "referrerProtectionTitle") (ne $v nil)}}
		referrer_protection_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableReferrerProtection") (ne $v nil)}}
		enable_referrer_protection = {{$v}}
{{- end}}
{{- if and (eq $k "referrerProtectionMode") (ne $v nil)}}
		referrer_protection_mode = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "referrerDomains"}}
		referrer_domains = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "enableReferrerRedirectOnDeny") (ne $v nil)}}
		enable_referrer_redirect_on_deny = {{$v}}
{{- end}}
{{- if and (eq $k "referrerRedirectUrl") (ne $v nil)}}
		referrer_redirect_url = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "corsSupport"}}
cors_support {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "allowOrigins") (ne $v nil)}}
		allow_origins = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "origins"}}
		origins = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "allowCredentials") (ne $v nil)}}
		allow_credentials = {{$v}}
{{- end}}
{{- if and (eq $k "allowHeaders") (ne $v nil)}}
		allow_headers = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "headers"}}
		headers = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "methods"}}
		methods = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "exposeHeaders"}}
		expose_headers = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "preflightMaxAge") (ne $v nil)}}
		preflight_max_age = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cpCode"}}
cp_code {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if eq $k "value" }}
		{{- if $v}}
		value {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "customBehavior"}}
custom_behavior {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "behaviorId") (ne $v nil)}}
		behavior_id = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "datastream"}}
datastream {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "streamType") (ne $v nil)}}
		stream_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "beaconStreamTitle") (ne $v nil)}}
		beacon_stream_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "datastreamIds") (ne $v nil)}}
		datastream_ids = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "logStreamTitle") (ne $v nil)}}
		log_stream_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "logEnabled") (ne $v nil)}}
		log_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "logStreamName") (ne $v nil)}}
		log_stream_name = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "samplingPercentage") (ne $v nil)}}
		sampling_percentage = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "collectMidgressTraffic") (ne $v nil)}}
		collect_midgress_traffic = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dcp"}}
dcp {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "namespaceId") (ne $v nil)}}
		namespace_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "tlsenabled") (ne $v nil)}}
		tlsenabled = {{$v}}
{{- end}}
{{- if and (eq $k "wsenabled") (ne $v nil)}}
		wsenabled = {{$v}}
{{- end}}
{{- if and (eq $k "gwenabled") (ne $v nil)}}
		gwenabled = {{$v}}
{{- end}}
{{- if and (eq $k "anonymous") (ne $v nil)}}
		anonymous = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dcpAuthHMACTransformation"}}
dcp_auth_hmac_transformation {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "hashConversionAlgorithm") (ne $v nil)}}
		hash_conversion_algorithm = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hashConversionKey") (ne $v nil)}}
		hash_conversion_key = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dcpAuthRegexTransformation"}}
dcp_auth_regex_transformation {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "regexPattern") (ne $v nil)}}
		regex_pattern = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dcpAuthSubstringTransformation"}}
dcp_auth_substring_transformation {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "substringStart") (ne $v nil)}}
		substring_start = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "substringEnd") (ne $v nil)}}
		substring_end = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dcpAuthVariableExtractor"}}
dcp_auth_variable_extractor {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "certificateField") (ne $v nil)}}
		certificate_field = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "dcpMutualAuthProcessingVariableId") (ne $v nil)}}
		dcp_mutual_auth_processing_variable_id = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dcpDefaultAuthzGroups"}}
dcp_default_authz_groups {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if eq $k "groupNames"}}
		group_names = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dcpDevRelations"}}
dcp_dev_relations {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "customValues") (ne $v nil)}}
		custom_values = {{$v}}
{{- end}}
{{- if and (eq $k "hostname") (ne $v nil)}}
		hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "path") (ne $v nil)}}
		path = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dcpRealTimeAuth"}}
dcp_real_time_auth {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "extractNamespace") (ne $v nil)}}
		extract_namespace = {{$v}}
{{- end}}
{{- if and (eq $k "namespaceClaim") (ne $v nil)}}
		namespace_claim = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "extractJurisdiction") (ne $v nil)}}
		extract_jurisdiction = {{$v}}
{{- end}}
{{- if and (eq $k "jurisdictionClaim") (ne $v nil)}}
		jurisdiction_claim = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "extractHostname") (ne $v nil)}}
		extract_hostname = {{$v}}
{{- end}}
{{- if and (eq $k "hostnameClaim") (ne $v nil)}}
		hostname_claim = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "deliveryReceipt"}}
delivery_receipt {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "denyAccess"}}
deny_access {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "reason") (ne $v nil)}}
		reason = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "denyDirectFailoverAccess"}}
deny_direct_failover_access {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "deviceCharacteristicCacheId"}}
device_characteristic_cache_id {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if eq $k "elements"}}
		elements = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "deviceCharacteristicHeader"}}
device_characteristic_header {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if eq $k "elements"}}
		elements = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dnsAsyncRefresh"}}
dns_async_refresh {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "timeout") (ne $v nil)}}
		timeout = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dnsPrefresh"}}
dns_prefresh {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "delay") (ne $v nil)}}
		delay = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "timeout") (ne $v nil)}}
		timeout = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "downgradeProtocol"}}
downgrade_protocol {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "downloadCompleteMarker"}}
download_complete_marker {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "downloadNotification"}}
download_notification {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "downstreamCache"}}
downstream_cache {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "behavior") (ne $v nil)}}
		behavior = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowBehavior") (ne $v nil)}}
		allow_behavior = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "ttl") (ne $v nil)}}
		ttl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sendHeaders") (ne $v nil)}}
		send_headers = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sendPrivate") (ne $v nil)}}
		send_private = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dynamicThroughtputOptimization"}}
dynamic_throughtput_optimization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dynamicThroughtputOptimizationOverride"}}
dynamic_throughtput_optimization_override {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "throughput") (ne $v nil)}}
		throughput = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "dynamicWebContent"}}
dynamic_web_content {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "sureRoute") (ne $v nil)}}
		sure_route = {{$v}}
{{- end}}
{{- if and (eq $k "prefetch") (ne $v nil)}}
		prefetch = {{$v}}
{{- end}}
{{- if and (eq $k "realUserMonitoring") (ne $v nil)}}
		real_user_monitoring = {{$v}}
{{- end}}
{{- if and (eq $k "imageCompression") (ne $v nil)}}
		image_compression = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "ecmsBulkUpload"}}
ecms_bulk_upload {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "ecmsDatabase"}}
ecms_database {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "database") (ne $v nil)}}
		database = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "extractLocation") (ne $v nil)}}
		extract_location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "headerName") (ne $v nil)}}
		header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "queryParameterName") (ne $v nil)}}
		query_parameter_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "regexPattern") (ne $v nil)}}
		regex_pattern = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "ecmsDataset"}}
ecms_dataset {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "dataset") (ne $v nil)}}
		dataset = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "extractLocation") (ne $v nil)}}
		extract_location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "headerName") (ne $v nil)}}
		header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "queryParameterName") (ne $v nil)}}
		query_parameter_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "regexPattern") (ne $v nil)}}
		regex_pattern = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "ecmsObjectKey"}}
ecms_object_key {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "regex") (ne $v nil)}}
		regex = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "edgeConnect"}}
edge_connect {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "apiConnector") (ne $v nil)}}
		api_connector = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "apiDataElements"}}
		api_data_elements = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "destinationHostname") (ne $v nil)}}
		destination_hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationPath") (ne $v nil)}}
		destination_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "overrideAggregateSettings") (ne $v nil)}}
		override_aggregate_settings = {{$v}}
{{- end}}
{{- if and (eq $k "aggregateTime") (ne $v nil)}}
		aggregate_time = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "aggregateLines") (ne $v nil)}}
		aggregate_lines = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "aggregateSize") (ne $v nil)}}
		aggregate_size = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "edgeLoadBalancingAdvanced"}}
edge_load_balancing_advanced {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "xml") (ne $v nil)}}
		xml = <<EOT
{{$v}}
%{~if false}trim redundant new line%{endif~}
EOT
{{- end}}
{{- end}}
}
{{- end}}
{{- define "edgeLoadBalancingDataCenter"}}
edge_load_balancing_data_center {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "originId") (ne $v nil)}}
		origin_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hostname") (ne $v nil)}}
		hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "cookieName") (ne $v nil)}}
		cookie_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "failoverTitle") (ne $v nil)}}
		failover_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableFailover") (ne $v nil)}}
		enable_failover = {{$v}}
{{- end}}
{{- if and (eq $k "ip") (ne $v nil)}}
		ip = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "failoverRules" }}
		{{- range $v := $v}}
		failover_rules {
{{- range $k, $v := $v}}
{{- if and (eq $k "failoverHostname") (ne $v nil)}}
		failover_hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "modifyRequest") (ne $v nil)}}
		modify_request = {{$v}}
{{- end}}
{{- if and (eq $k "overrideHostname") (ne $v nil)}}
		override_hostname = {{$v}}
{{- end}}
{{- if and (eq $k "contextRoot") (ne $v nil)}}
		context_root = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "absolutePath") (ne $v nil)}}
		absolute_path = {{$v}}
{{- end}}
{{- end}}
		}
{{- end}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "edgeLoadBalancingOrigin"}}
edge_load_balancing_origin {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hostname") (ne $v nil)}}
		hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sessionPersistenceTitle") (ne $v nil)}}
		session_persistence_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableSessionPersistence") (ne $v nil)}}
		enable_session_persistence = {{$v}}
{{- end}}
{{- if and (eq $k "cookieName") (ne $v nil)}}
		cookie_name = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "edgeOriginAuthorization"}}
edge_origin_authorization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "cookieName") (ne $v nil)}}
		cookie_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "domain") (ne $v nil)}}
		domain = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "edgeRedirector"}}
edge_redirector {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "isSharedPolicy") (ne $v nil)}}
		is_shared_policy = {{$v}}
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "cloudletSharedPolicy") (ne $v nil)}}
		cloudlet_shared_policy = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "edgeScape"}}
edge_scape {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "edgeSideIncludes"}}
edge_side_includes {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "enableViaHttp") (ne $v nil)}}
		enable_via_http = {{$v}}
{{- end}}
{{- if and (eq $k "passSetCookie") (ne $v nil)}}
		pass_set_cookie = {{$v}}
{{- end}}
{{- if and (eq $k "passClientIp") (ne $v nil)}}
		pass_client_ip = {{$v}}
{{- end}}
{{- if and (eq $k "i18nStatus") (ne $v nil)}}
		i18n_status = {{$v}}
{{- end}}
{{- if eq $k "i18nCharset"}}
		i18n_charset = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "detectInjection") (ne $v nil)}}
		detect_injection = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "edgeWorker"}}
edge_worker {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "createEdgeWorker") (ne $v nil)}}
		create_edge_worker = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "edgeWorkerId") (ne $v nil)}}
		edge_worker_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "resourceTier") (ne $v nil)}}
		resource_tier = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "enhancedAkamaiProtocol"}}
enhanced_akamai_protocol {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "display") (ne $v nil)}}
		display = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "enhancedProxyDetection"}}
enhanced_proxy_detection {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "forwardHeaderEnrichment") (ne $v nil)}}
		forward_header_enrichment = {{$v}}
{{- end}}
{{- if and (eq $k "enableConfigurationMode") (ne $v nil)}}
		enable_configuration_mode = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "bestPracticeAction") (ne $v nil)}}
		best_practice_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "bestPracticeRedirecturl") (ne $v nil)}}
		best_practice_redirecturl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "anonymousVpn") (ne $v nil)}}
		anonymous_vpn = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectAnonymousVpn") (ne $v nil)}}
		detect_anonymous_vpn = {{$v}}
{{- end}}
{{- if and (eq $k "detectAnonymousVpnAction") (ne $v nil)}}
		detect_anonymous_vpn_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectAnonymousVpnRedirecturl") (ne $v nil)}}
		detect_anonymous_vpn_redirecturl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "publicProxy") (ne $v nil)}}
		public_proxy = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectPublicProxy") (ne $v nil)}}
		detect_public_proxy = {{$v}}
{{- end}}
{{- if and (eq $k "detectPublicProxyAction") (ne $v nil)}}
		detect_public_proxy_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectPublicProxyRedirecturl") (ne $v nil)}}
		detect_public_proxy_redirecturl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "torExitNode") (ne $v nil)}}
		tor_exit_node = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectTorExitNode") (ne $v nil)}}
		detect_tor_exit_node = {{$v}}
{{- end}}
{{- if and (eq $k "detectTorExitNodeAction") (ne $v nil)}}
		detect_tor_exit_node_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectTorExitNodeRedirecturl") (ne $v nil)}}
		detect_tor_exit_node_redirecturl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "smartDNSProxy") (ne $v nil)}}
		smart_dns_proxy = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectSmartDNSProxy") (ne $v nil)}}
		detect_smart_dns_proxy = {{$v}}
{{- end}}
{{- if and (eq $k "detectSmartDNSProxyAction") (ne $v nil)}}
		detect_smart_dns_proxy_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectSmartDNSProxyRedirecturl") (ne $v nil)}}
		detect_smart_dns_proxy_redirecturl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hostingProvider") (ne $v nil)}}
		hosting_provider = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectHostingProvider") (ne $v nil)}}
		detect_hosting_provider = {{$v}}
{{- end}}
{{- if and (eq $k "detectHostingProviderAction") (ne $v nil)}}
		detect_hosting_provider_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectHostingProviderRedirecturl") (ne $v nil)}}
		detect_hosting_provider_redirecturl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "vpnDataCenter") (ne $v nil)}}
		vpn_data_center = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectVpnDataCenter") (ne $v nil)}}
		detect_vpn_data_center = {{$v}}
{{- end}}
{{- if and (eq $k "detectVpnDataCenterAction") (ne $v nil)}}
		detect_vpn_data_center_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectVpnDataCenterRedirecturl") (ne $v nil)}}
		detect_vpn_data_center_redirecturl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "residentialProxy") (ne $v nil)}}
		residential_proxy = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectResidentialProxy") (ne $v nil)}}
		detect_residential_proxy = {{$v}}
{{- end}}
{{- if and (eq $k "detectResidentialProxyAction") (ne $v nil)}}
		detect_residential_proxy_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectResidentialProxyRedirecturl") (ne $v nil)}}
		detect_residential_proxy_redirecturl = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "epdForwardHeaderEnrichment"}}
epd_forward_header_enrichment {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "failAction"}}
fail_action {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "actionType") (ne $v nil)}}
		action_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasType") (ne $v nil)}}
		saas_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasCnameEnabled") (ne $v nil)}}
		saas_cname_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "saasCnameLevel") (ne $v nil)}}
		saas_cname_level = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "saasCookie") (ne $v nil)}}
		saas_cookie = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasQueryString") (ne $v nil)}}
		saas_query_string = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasRegex") (ne $v nil)}}
		saas_regex = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasReplace") (ne $v nil)}}
		saas_replace = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasSuffix") (ne $v nil)}}
		saas_suffix = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "dynamicMethod") (ne $v nil)}}
		dynamic_method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "dynamicCustomPath") (ne $v nil)}}
		dynamic_custom_path = {{$v}}
{{- end}}
{{- if and (eq $k "dynamicPath") (ne $v nil)}}
		dynamic_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "redirectHostnameType") (ne $v nil)}}
		redirect_hostname_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "redirectHostname") (ne $v nil)}}
		redirect_hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "redirectCustomPath") (ne $v nil)}}
		redirect_custom_path = {{$v}}
{{- end}}
{{- if and (eq $k "redirectPath") (ne $v nil)}}
		redirect_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "redirectMethod") (ne $v nil)}}
		redirect_method = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "contentHostname") (ne $v nil)}}
		content_hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "contentCustomPath") (ne $v nil)}}
		content_custom_path = {{$v}}
{{- end}}
{{- if and (eq $k "contentPath") (ne $v nil)}}
		content_path = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "netStorageHostname" }}
		{{- if $v}}
		net_storage_hostname {
{{- range $k, $v := $v}}
{{- if and (eq $k "cpCode") (ne $v nil)}}
		cp_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "downloadDomainName") (ne $v nil)}}
		download_domain_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "g2oToken") (ne $v nil)}}
		g2o_token = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "netStoragePath") (ne $v nil)}}
		net_storage_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "cexHostname") (ne $v nil)}}
		cex_hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "cexCustomPath") (ne $v nil)}}
		cex_custom_path = {{$v}}
{{- end}}
{{- if and (eq $k "cexPath") (ne $v nil)}}
		cex_path = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "cpCode" }}
		{{- if $v}}
		cp_code {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "statusCode") (ne $v nil)}}
		status_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "preserveQueryString") (ne $v nil)}}
		preserve_query_string = {{$v}}
{{- end}}
{{- if and (eq $k "modifyProtocol") (ne $v nil)}}
		modify_protocol = {{$v}}
{{- end}}
{{- if and (eq $k "protocol") (ne $v nil)}}
		protocol = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowFCMParentOverride") (ne $v nil)}}
		allow_fcm_parent_override = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "failoverBotManagerFeatureCompatibility"}}
failover_bot_manager_feature_compatibility {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "compatibility") (ne $v nil)}}
		compatibility = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "fastInvalidate"}}
fast_invalidate {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "firstPartyMarketing"}}
first_party_marketing {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "javaScriptInsertionRule") (ne $v nil)}}
		java_script_insertion_rule = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "mediaMathPrefix") (ne $v nil)}}
		media_math_prefix = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "firstPartyMarketingPlus"}}
first_party_marketing_plus {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "javaScriptInsertionRule") (ne $v nil)}}
		java_script_insertion_rule = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "mediaMathPrefix") (ne $v nil)}}
		media_math_prefix = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "forwardRewrite"}}
forward_rewrite {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "isSharedPolicy") (ne $v nil)}}
		is_shared_policy = {{$v}}
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "cloudletSharedPolicy") (ne $v nil)}}
		cloudlet_shared_policy = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "frontEndOptimization"}}
front_end_optimization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "g2oheader"}}
g2oheader {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "dataHeader") (ne $v nil)}}
		data_header = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "signedHeader") (ne $v nil)}}
		signed_header = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "encodingVersion") (ne $v nil)}}
		encoding_version = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "useCustomSignString") (ne $v nil)}}
		use_custom_sign_string = {{$v}}
{{- end}}
{{- if eq $k "customSignString"}}
		custom_sign_string = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "secretKey") (ne $v nil)}}
		secret_key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "nonce") (ne $v nil)}}
		nonce = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "globalRequestNumber"}}
global_request_number {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "outputOption") (ne $v nil)}}
		output_option = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "headerName") (ne $v nil)}}
		header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "variableName") (ne $v nil)}}
		variable_name = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "graphqlCaching"}}
graphql_caching {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "cacheResponsesWithErrors") (ne $v nil)}}
		cache_responses_with_errors = {{$v}}
{{- end}}
{{- if and (eq $k "advanced") (ne $v nil)}}
		advanced = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "postRequestProcessingErrorHandling") (ne $v nil)}}
		post_request_processing_error_handling = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "operationsUrlQueryParameterName") (ne $v nil)}}
		operations_url_query_parameter_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "operationsJsonBodyParameterName") (ne $v nil)}}
		operations_json_body_parameter_name = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "gzipResponse"}}
gzip_response {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "behavior") (ne $v nil)}}
		behavior = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "hdDataAdvanced"}}
hd_data_advanced {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "xml") (ne $v nil)}}
		xml = <<EOT
{{$v}}
%{~if false}trim redundant new line%{endif~}
EOT
{{- end}}
{{- end}}
}
{{- end}}
{{- define "healthDetection"}}
health_detection {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "retryCount") (ne $v nil)}}
		retry_count = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "retryInterval") (ne $v nil)}}
		retry_interval = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "maximumReconnects") (ne $v nil)}}
		maximum_reconnects = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "hsafEipBinding"}}
hsaf_eip_binding {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "customExtractedSerial") (ne $v nil)}}
		custom_extracted_serial = {{$v}}
{{- end}}
{{- if and (eq $k "hashMinValue") (ne $v nil)}}
		hash_min_value = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "hashMaxValue") (ne $v nil)}}
		hash_max_value = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "tier") (ne $v nil)}}
		tier = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "http2"}}
http2 {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "http3"}}
http3 {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enable") (ne $v nil)}}
		enable = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "httpStrictTransportSecurity"}}
http_strict_transport_security {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enable") (ne $v nil)}}
		enable = {{$v}}
{{- end}}
{{- if and (eq $k "maxAge") (ne $v nil)}}
		max_age = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "includeSubDomains") (ne $v nil)}}
		include_sub_domains = {{$v}}
{{- end}}
{{- if and (eq $k "preload") (ne $v nil)}}
		preload = {{$v}}
{{- end}}
{{- if and (eq $k "redirect") (ne $v nil)}}
		redirect = {{$v}}
{{- end}}
{{- if and (eq $k "redirectStatusCode") (ne $v nil)}}
		redirect_status_code = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "httpToHttpsUpgrade"}}
http_to_https_upgrade {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "upgrade") (ne $v nil)}}
		upgrade = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "imOverride"}}
im_override {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "override") (ne $v nil)}}
		override = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "typesel") (ne $v nil)}}
		typesel = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "formatvar") (ne $v nil)}}
		formatvar = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "format") (ne $v nil)}}
		format = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "dprvar") (ne $v nil)}}
		dprvar = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "dpr") (ne $v nil)}}
		dpr = {{$v}}
{{- end}}
{{- if and (eq $k "widthvar") (ne $v nil)}}
		widthvar = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "width") (ne $v nil)}}
		width = {{$v}}
{{- end}}
{{- if and (eq $k "policyvar") (ne $v nil)}}
		policyvar = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "policy") (ne $v nil)}}
		policy = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "policyvarName") (ne $v nil)}}
		policyvar_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "policyvarIMvar") (ne $v nil)}}
		policyvar_i_mvar = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "excludeAllQueryParameters") (ne $v nil)}}
		exclude_all_query_parameters = {{$v}}
{{- end}}
{{- if eq $k "excludedQueryParameters"}}
		excluded_query_parameters = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "imageAndVideoManager"}}
image_and_video_manager {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "policySetType") (ne $v nil)}}
		policy_set_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "resize") (ne $v nil)}}
		resize = {{$v}}
{{- end}}
{{- if and (eq $k "applyBestFileType") (ne $v nil)}}
		apply_best_file_type = {{$v}}
{{- end}}
{{- if eq $k "cpCodeOriginal" }}
		{{- if $v}}
		cp_code_original {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if eq $k "cpCodeTransformed" }}
		{{- if $v}}
		cp_code_transformed {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "imageSet") (ne $v nil)}}
		image_set = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "videoSet") (ne $v nil)}}
		video_set = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "imageManager"}}
image_manager {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "settingsTitle") (ne $v nil)}}
		settings_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "resize") (ne $v nil)}}
		resize = {{$v}}
{{- end}}
{{- if and (eq $k "applyBestFileType") (ne $v nil)}}
		apply_best_file_type = {{$v}}
{{- end}}
{{- if and (eq $k "superCacheRegion") (ne $v nil)}}
		super_cache_region = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "trafficTitle") (ne $v nil)}}
		traffic_title = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "cpCodeOriginal" }}
		{{- if $v}}
		cp_code_original {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if eq $k "cpCodeTransformed" }}
		{{- if $v}}
		cp_code_transformed {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "apiReferenceTitle") (ne $v nil)}}
		api_reference_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useExistingPolicySet") (ne $v nil)}}
		use_existing_policy_set = {{$v}}
{{- end}}
{{- if and (eq $k "policySet") (ne $v nil)}}
		policy_set = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "advanced") (ne $v nil)}}
		advanced = {{$v}}
{{- end}}
{{- if and (eq $k "policyToken") (ne $v nil)}}
		policy_token = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "policyTokenDefault") (ne $v nil)}}
		policy_token_default = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "imageManagerVideo"}}
image_manager_video {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "settingsTitle") (ne $v nil)}}
		settings_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "resize") (ne $v nil)}}
		resize = {{$v}}
{{- end}}
{{- if and (eq $k "applyBestFileType") (ne $v nil)}}
		apply_best_file_type = {{$v}}
{{- end}}
{{- if and (eq $k "superCacheRegion") (ne $v nil)}}
		super_cache_region = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "trafficTitle") (ne $v nil)}}
		traffic_title = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "cpCodeOriginal" }}
		{{- if $v}}
		cp_code_original {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if eq $k "cpCodeTransformed" }}
		{{- if $v}}
		cp_code_transformed {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "apiReferenceTitle") (ne $v nil)}}
		api_reference_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useExistingPolicySet") (ne $v nil)}}
		use_existing_policy_set = {{$v}}
{{- end}}
{{- if and (eq $k "policySet") (ne $v nil)}}
		policy_set = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "advanced") (ne $v nil)}}
		advanced = {{$v}}
{{- end}}
{{- if and (eq $k "policyToken") (ne $v nil)}}
		policy_token = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "policyTokenDefault") (ne $v nil)}}
		policy_token_default = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "include"}}
include {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "inputValidation"}}
input_validation {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "label") (ne $v nil)}}
		label = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "userIdentificationTitle") (ne $v nil)}}
		user_identification_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "userIdentificationByCookie") (ne $v nil)}}
		user_identification_by_cookie = {{$v}}
{{- end}}
{{- if and (eq $k "userIdentificationKeyCookie") (ne $v nil)}}
		user_identification_key_cookie = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "userIdentificationByIp") (ne $v nil)}}
		user_identification_by_ip = {{$v}}
{{- end}}
{{- if and (eq $k "userIdentificationByHeaders") (ne $v nil)}}
		user_identification_by_headers = {{$v}}
{{- end}}
{{- if eq $k "userIdentificationKeyHeaders"}}
		user_identification_key_headers = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "userIdentificationByParams") (ne $v nil)}}
		user_identification_by_params = {{$v}}
{{- end}}
{{- if eq $k "userIdentificationKeyParams"}}
		user_identification_key_params = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "validationTitle") (ne $v nil)}}
		validation_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowLargePostBody") (ne $v nil)}}
		allow_large_post_body = {{$v}}
{{- end}}
{{- if and (eq $k "resetOnValid") (ne $v nil)}}
		reset_on_valid = {{$v}}
{{- end}}
{{- if and (eq $k "validateOnOriginWith") (ne $v nil)}}
		validate_on_origin_with = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "validateOnOriginHeaderName") (ne $v nil)}}
		validate_on_origin_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "validateOnOriginHeaderValue") (ne $v nil)}}
		validate_on_origin_header_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "validateOnOriginResponseCode") (ne $v nil)}}
		validate_on_origin_response_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "failure302Uri") (ne $v nil)}}
		failure302_uri = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "penaltyTitle") (ne $v nil)}}
		penalty_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "penaltyThreshold") (ne $v nil)}}
		penalty_threshold = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "penaltyAction") (ne $v nil)}}
		penalty_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "penalty302Uri") (ne $v nil)}}
		penalty302_uri = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "penaltyNetStorage" }}
		{{- if $v}}
		penalty_net_storage {
{{- range $k, $v := $v}}
{{- if and (eq $k "cpCode") (ne $v nil)}}
		cp_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "downloadDomainName") (ne $v nil)}}
		download_domain_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "g2oToken") (ne $v nil)}}
		g2o_token = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "penalty403NetStoragePath") (ne $v nil)}}
		penalty403_net_storage_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "penaltyBrandedDenyCacheTtl") (ne $v nil)}}
		penalty_branded_deny_cache_ttl = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "instant"}}
instant {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "prefetchCacheable") (ne $v nil)}}
		prefetch_cacheable = {{$v}}
{{- end}}
{{- if and (eq $k "prefetchNoStore") (ne $v nil)}}
		prefetch_no_store = {{$v}}
{{- end}}
{{- if eq $k "prefetchNoStoreExtensions"}}
		prefetch_no_store_extensions = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "prefetchHtml") (ne $v nil)}}
		prefetch_html = {{$v}}
{{- end}}
{{- if eq $k "customLinkRelations"}}
		custom_link_relations = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "instantConfig"}}
instant_config {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "largeFileOptimization"}}
large_file_optimization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "enablePartialObjectCaching") (ne $v nil)}}
		enable_partial_object_caching = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "minimumSize") (ne $v nil)}}
		minimum_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "maximumSize") (ne $v nil)}}
		maximum_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useVersioning") (ne $v nil)}}
		use_versioning = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "largeFileOptimizationAdvanced"}}
large_file_optimization_advanced {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "objectSize") (ne $v nil)}}
		object_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "fragmentSize") (ne $v nil)}}
		fragment_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "prefetchDuringRequest") (ne $v nil)}}
		prefetch_during_request = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "prefetchAfterRequest") (ne $v nil)}}
		prefetch_after_request = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "limitBitRate"}}
limit_bit_rate {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if eq $k "bitrateTable" }}
		{{- range $v := $v}}
		bitrate_table {
{{- range $k, $v := $v}}
{{- if and (eq $k "bitrateValue") (ne $v nil)}}
		bitrate_value = {{$v}}
{{- end}}
{{- if and (eq $k "bitrateUnit") (ne $v nil)}}
		bitrate_unit = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
{{- end}}
{{- end}}
{{- if eq $k "thresholdTable" }}
		{{- range $v := $v}}
		threshold_table {
{{- range $k, $v := $v}}
{{- if and (eq $k "thresholdValue") (ne $v nil)}}
		threshold_value = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "thresholdUnit") (ne $v nil)}}
		threshold_unit = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
{{- end}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "logCustom"}}
log_custom {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "logCustomLogField") (ne $v nil)}}
		log_custom_log_field = {{$v}}
{{- end}}
{{- if and (eq $k "customLogField") (ne $v nil)}}
		custom_log_field = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "mPulse"}}
m_pulse {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "requirePci") (ne $v nil)}}
		require_pci = {{$v}}
{{- end}}
{{- if and (eq $k "loaderVersion") (ne $v nil)}}
		loader_version = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "titleOptional") (ne $v nil)}}
		title_optional = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "apiKey") (ne $v nil)}}
		api_key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "bufferSize") (ne $v nil)}}
		buffer_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "configOverride") (ne $v nil)}}
		config_override = <<EOT
{{$v}}
%{~if false}trim redundant new line%{endif~}
EOT
{{- end}}
{{- end}}
}
{{- end}}
{{- define "manifestPersonalization"}}
manifest_personalization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "hlsTitle") (ne $v nil)}}
		hls_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hlsEnabled") (ne $v nil)}}
		hls_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "hlsMode") (ne $v nil)}}
		hls_mode = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hlsPreferredBitrate") (ne $v nil)}}
		hls_preferred_bitrate = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hlsFilterInBitrates") (ne $v nil)}}
		hls_filter_in_bitrates = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hlsFilterInBitrateRanges") (ne $v nil)}}
		hls_filter_in_bitrate_ranges = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hlsQueryParamEnabled") (ne $v nil)}}
		hls_query_param_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "hlsQueryParamSecretKey") (ne $v nil)}}
		hls_query_param_secret_key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hlsQueryParamTransitionKey") (ne $v nil)}}
		hls_query_param_transition_key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hlsShowAdvanced") (ne $v nil)}}
		hls_show_advanced = {{$v}}
{{- end}}
{{- if and (eq $k "hlsEnableDebugHeaders") (ne $v nil)}}
		hls_enable_debug_headers = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "manifestRerouting"}}
manifest_rerouting {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "partner") (ne $v nil)}}
		partner = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "username") (ne $v nil)}}
		username = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "manualServerPush"}}
manual_server_push {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if eq $k "serverpushlist"}}
		serverpushlist = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "mediaAcceleration"}}
media_acceleration {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "mediaAccelerationQuicOptout"}}
media_acceleration_quic_optout {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "optout") (ne $v nil)}}
		optout = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "mediaClient"}}
media_client {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "beaconId") (ne $v nil)}}
		beacon_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useHybridHttpUdp") (ne $v nil)}}
		use_hybrid_http_udp = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "mediaFileRetrievalOptimization"}}
media_file_retrieval_optimization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "mediaOriginFailover"}}
media_origin_failover {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "detectOriginUnresponsiveTitle") (ne $v nil)}}
		detect_origin_unresponsive_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectOriginUnresponsive") (ne $v nil)}}
		detect_origin_unresponsive = {{$v}}
{{- end}}
{{- if and (eq $k "originUnresponsiveDetectionLevel") (ne $v nil)}}
		origin_unresponsive_detection_level = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnresponsiveBlacklistOriginIp") (ne $v nil)}}
		origin_unresponsive_blacklist_origin_ip = {{$v}}
{{- end}}
{{- if and (eq $k "originUnresponsiveBlacklistWindow") (ne $v nil)}}
		origin_unresponsive_blacklist_window = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnresponsiveRecovery") (ne $v nil)}}
		origin_unresponsive_recovery = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnresponsiveRetryLimit") (ne $v nil)}}
		origin_unresponsive_retry_limit = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnresponsiveBackupHost") (ne $v nil)}}
		origin_unresponsive_backup_host = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnresponsiveAlternateHost") (ne $v nil)}}
		origin_unresponsive_alternate_host = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnresponsiveModifyRequestPath") (ne $v nil)}}
		origin_unresponsive_modify_request_path = {{$v}}
{{- end}}
{{- if and (eq $k "originUnresponsiveModifiedPath") (ne $v nil)}}
		origin_unresponsive_modified_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnresponsiveIncludeQueryString") (ne $v nil)}}
		origin_unresponsive_include_query_string = {{$v}}
{{- end}}
{{- if and (eq $k "originUnresponsiveRedirectMethod") (ne $v nil)}}
		origin_unresponsive_redirect_method = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "originUnresponsiveChangeProtocol") (ne $v nil)}}
		origin_unresponsive_change_protocol = {{$v}}
{{- end}}
{{- if and (eq $k "originUnresponsiveProtocol") (ne $v nil)}}
		origin_unresponsive_protocol = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectOriginUnavailableTitle") (ne $v nil)}}
		detect_origin_unavailable_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectOriginUnavailable") (ne $v nil)}}
		detect_origin_unavailable = {{$v}}
{{- end}}
{{- if and (eq $k "originUnavailableDetectionLevel") (ne $v nil)}}
		origin_unavailable_detection_level = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "originUnavailableResponseCodes"}}
		origin_unavailable_response_codes = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "originUnavailableBlacklistOriginIp") (ne $v nil)}}
		origin_unavailable_blacklist_origin_ip = {{$v}}
{{- end}}
{{- if and (eq $k "originUnavailableBlacklistWindow") (ne $v nil)}}
		origin_unavailable_blacklist_window = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnavailableRecovery") (ne $v nil)}}
		origin_unavailable_recovery = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnavailableRetryLimit") (ne $v nil)}}
		origin_unavailable_retry_limit = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnavailableBackupHost") (ne $v nil)}}
		origin_unavailable_backup_host = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnavailableAlternateHost") (ne $v nil)}}
		origin_unavailable_alternate_host = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnavailableModifyRequestPath") (ne $v nil)}}
		origin_unavailable_modify_request_path = {{$v}}
{{- end}}
{{- if and (eq $k "originUnavailableModifiedPath") (ne $v nil)}}
		origin_unavailable_modified_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originUnavailableIncludeQueryString") (ne $v nil)}}
		origin_unavailable_include_query_string = {{$v}}
{{- end}}
{{- if and (eq $k "originUnavailableRedirectMethod") (ne $v nil)}}
		origin_unavailable_redirect_method = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "originUnavailableChangeProtocol") (ne $v nil)}}
		origin_unavailable_change_protocol = {{$v}}
{{- end}}
{{- if and (eq $k "originUnavailableProtocol") (ne $v nil)}}
		origin_unavailable_protocol = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectObjectUnavailableTitle") (ne $v nil)}}
		detect_object_unavailable_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "detectObjectUnavailable") (ne $v nil)}}
		detect_object_unavailable = {{$v}}
{{- end}}
{{- if and (eq $k "objectUnavailableDetectionLevel") (ne $v nil)}}
		object_unavailable_detection_level = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "objectUnavailableResponseCodes"}}
		object_unavailable_response_codes = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "objectUnavailableBlacklistOriginIp") (ne $v nil)}}
		object_unavailable_blacklist_origin_ip = {{$v}}
{{- end}}
{{- if and (eq $k "objectUnavailableBlacklistWindow") (ne $v nil)}}
		object_unavailable_blacklist_window = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "objectUnavailableRecovery") (ne $v nil)}}
		object_unavailable_recovery = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "objectUnavailableRetryLimit") (ne $v nil)}}
		object_unavailable_retry_limit = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "objectUnavailableBackupHost") (ne $v nil)}}
		object_unavailable_backup_host = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "objectUnavailableAlternateHost") (ne $v nil)}}
		object_unavailable_alternate_host = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "objectUnavailableModifyRequestPath") (ne $v nil)}}
		object_unavailable_modify_request_path = {{$v}}
{{- end}}
{{- if and (eq $k "objectUnavailableModifiedPath") (ne $v nil)}}
		object_unavailable_modified_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "objectUnavailableIncludeQueryString") (ne $v nil)}}
		object_unavailable_include_query_string = {{$v}}
{{- end}}
{{- if and (eq $k "objectUnavailableRedirectMethod") (ne $v nil)}}
		object_unavailable_redirect_method = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "objectUnavailableChangeProtocol") (ne $v nil)}}
		object_unavailable_change_protocol = {{$v}}
{{- end}}
{{- if and (eq $k "objectUnavailableProtocol") (ne $v nil)}}
		object_unavailable_protocol = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "otherOptions") (ne $v nil)}}
		other_options = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "clientResponseCode") (ne $v nil)}}
		client_response_code = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "cacheErrorResponse") (ne $v nil)}}
		cache_error_response = {{$v}}
{{- end}}
{{- if and (eq $k "cacheWindow") (ne $v nil)}}
		cache_window = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "metadataCaching"}}
metadata_caching {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "mobileSdkPerformance"}}
mobile_sdk_performance {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "secondaryMultipathToOrigin") (ne $v nil)}}
		secondary_multipath_to_origin = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "modifyIncomingRequestHeader"}}
modify_incoming_request_header {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "action") (ne $v nil)}}
		action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardAddHeaderName") (ne $v nil)}}
		standard_add_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardDeleteHeaderName") (ne $v nil)}}
		standard_delete_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardModifyHeaderName") (ne $v nil)}}
		standard_modify_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardPassHeaderName") (ne $v nil)}}
		standard_pass_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customHeaderName") (ne $v nil)}}
		custom_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "headerValue") (ne $v nil)}}
		header_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "newHeaderValue") (ne $v nil)}}
		new_header_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "avoidDuplicateHeaders") (ne $v nil)}}
		avoid_duplicate_headers = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "modifyIncomingResponseHeader"}}
modify_incoming_response_header {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "action") (ne $v nil)}}
		action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardAddHeaderName") (ne $v nil)}}
		standard_add_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardDeleteHeaderName") (ne $v nil)}}
		standard_delete_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardModifyHeaderName") (ne $v nil)}}
		standard_modify_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardPassHeaderName") (ne $v nil)}}
		standard_pass_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customHeaderName") (ne $v nil)}}
		custom_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "headerValue") (ne $v nil)}}
		header_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "newHeaderValue") (ne $v nil)}}
		new_header_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "avoidDuplicateHeaders") (ne $v nil)}}
		avoid_duplicate_headers = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "modifyOutgoingRequestHeader"}}
modify_outgoing_request_header {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "action") (ne $v nil)}}
		action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardAddHeaderName") (ne $v nil)}}
		standard_add_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardDeleteHeaderName") (ne $v nil)}}
		standard_delete_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardModifyHeaderName") (ne $v nil)}}
		standard_modify_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customHeaderName") (ne $v nil)}}
		custom_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "headerValue") (ne $v nil)}}
		header_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "newHeaderValue") (ne $v nil)}}
		new_header_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "regexHeaderMatch") (ne $v nil)}}
		regex_header_match = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "regexHeaderReplace") (ne $v nil)}}
		regex_header_replace = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchMultiple") (ne $v nil)}}
		match_multiple = {{$v}}
{{- end}}
{{- if and (eq $k "avoidDuplicateHeaders") (ne $v nil)}}
		avoid_duplicate_headers = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "modifyOutgoingResponseHeader"}}
modify_outgoing_response_header {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "action") (ne $v nil)}}
		action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardAddHeaderName") (ne $v nil)}}
		standard_add_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardDeleteHeaderName") (ne $v nil)}}
		standard_delete_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "standardModifyHeaderName") (ne $v nil)}}
		standard_modify_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customHeaderName") (ne $v nil)}}
		custom_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "headerValue") (ne $v nil)}}
		header_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "newHeaderValue") (ne $v nil)}}
		new_header_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "regexHeaderMatch") (ne $v nil)}}
		regex_header_match = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "regexHeaderReplace") (ne $v nil)}}
		regex_header_replace = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchMultiple") (ne $v nil)}}
		match_multiple = {{$v}}
{{- end}}
{{- if and (eq $k "avoidDuplicateHeaders") (ne $v nil)}}
		avoid_duplicate_headers = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "modifyViaHeader"}}
modify_via_header {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "modificationOption") (ne $v nil)}}
		modification_option = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "renameHeaderTo") (ne $v nil)}}
		rename_header_to = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "origin"}}
origin {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "originType") (ne $v nil)}}
		origin_type = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "netStorage" }}
		{{- if $v}}
		net_storage {
{{- range $k, $v := $v}}
{{- if and (eq $k "cpCode") (ne $v nil)}}
		cp_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "downloadDomainName") (ne $v nil)}}
		download_domain_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "g2oToken") (ne $v nil)}}
		g2o_token = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "originId") (ne $v nil)}}
		origin_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hostname") (ne $v nil)}}
		hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "secondHostnameEnabled") (ne $v nil)}}
		second_hostname_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "secondHostname") (ne $v nil)}}
		second_hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "mslorigin") (ne $v nil)}}
		mslorigin = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasType") (ne $v nil)}}
		saas_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasCnameEnabled") (ne $v nil)}}
		saas_cname_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "saasCnameLevel") (ne $v nil)}}
		saas_cname_level = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "saasCookie") (ne $v nil)}}
		saas_cookie = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasQueryString") (ne $v nil)}}
		saas_query_string = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasRegex") (ne $v nil)}}
		saas_regex = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasReplace") (ne $v nil)}}
		saas_replace = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "saasSuffix") (ne $v nil)}}
		saas_suffix = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "forwardHostHeader") (ne $v nil)}}
		forward_host_header = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customForwardHostHeader") (ne $v nil)}}
		custom_forward_host_header = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "cacheKeyHostname") (ne $v nil)}}
		cache_key_hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "ipVersion") (ne $v nil)}}
		ip_version = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useUniqueCacheKey") (ne $v nil)}}
		use_unique_cache_key = {{$v}}
{{- end}}
{{- if and (eq $k "compress") (ne $v nil)}}
		compress = {{$v}}
{{- end}}
{{- if and (eq $k "enableTrueClientIp") (ne $v nil)}}
		enable_true_client_ip = {{$v}}
{{- end}}
{{- if and (eq $k "trueClientIpHeader") (ne $v nil)}}
		true_client_ip_header = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "trueClientIpClientSetting") (ne $v nil)}}
		true_client_ip_client_setting = {{$v}}
{{- end}}
{{- if and (eq $k "originCertificate") (ne $v nil)}}
		origin_certificate = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "verificationMode") (ne $v nil)}}
		verification_mode = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originSni") (ne $v nil)}}
		origin_sni = {{$v}}
{{- end}}
{{- if eq $k "customValidCnValues"}}
		custom_valid_cn_values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "originCertsToHonor") (ne $v nil)}}
		origin_certs_to_honor = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "standardCertificateAuthorities"}}
		standard_certificate_authorities = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "customCertificateAuthorities" }}
		{{- range $v := $v}}
		custom_certificate_authorities {
{{- range $k, $v := $v}}
{{- if and (eq $k "pemEncodedCert") (ne $v nil)}}
		pem_encoded_cert = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sha1Fingerprint") (ne $v nil)}}
		sha1_fingerprint = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
{{- end}}
{{- end}}
{{- if eq $k "customCertificates" }}
		{{- range $v := $v}}
		custom_certificates {
{{- range $k, $v := $v}}
{{- if and (eq $k "pemEncodedCert") (ne $v nil)}}
		pem_encoded_cert = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sha1Fingerprint") (ne $v nil)}}
		sha1_fingerprint = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
{{- end}}
{{- end}}
{{- if and (eq $k "ports") (ne $v nil)}}
		ports = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "httpPort") (ne $v nil)}}
		http_port = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "httpsPort") (ne $v nil)}}
		https_port = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "originCharacteristics"}}
origin_characteristics {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "country") (ne $v nil)}}
		country = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "adcTitle") (ne $v nil)}}
		adc_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "directConnectGeo") (ne $v nil)}}
		direct_connect_geo = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "authenticationMethodTitle") (ne $v nil)}}
		authentication_method_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "authenticationMethod") (ne $v nil)}}
		authentication_method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "encodingVersion") (ne $v nil)}}
		encoding_version = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "useCustomSignString") (ne $v nil)}}
		use_custom_sign_string = {{$v}}
{{- end}}
{{- if eq $k "customSignString"}}
		custom_sign_string = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "secretKey") (ne $v nil)}}
		secret_key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "nonce") (ne $v nil)}}
		nonce = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "mslkey") (ne $v nil)}}
		mslkey = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "mslname") (ne $v nil)}}
		mslname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "accessKeyEncryptedStorage") (ne $v nil)}}
		access_key_encrypted_storage = {{$v}}
{{- end}}
{{- if and (eq $k "gcsAccessKeyVersionGuid") (ne $v nil)}}
		gcs_access_key_version_guid = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "gcsHmacKeyAccessId") (ne $v nil)}}
		gcs_hmac_key_access_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "gcsHmacKeySecret") (ne $v nil)}}
		gcs_hmac_key_secret = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "awsAccessKeyVersionGuid") (ne $v nil)}}
		aws_access_key_version_guid = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "awsAccessKeyId") (ne $v nil)}}
		aws_access_key_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "awsSecretAccessKey") (ne $v nil)}}
		aws_secret_access_key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "awsRegion") (ne $v nil)}}
		aws_region = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "awsHost") (ne $v nil)}}
		aws_host = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "awsService") (ne $v nil)}}
		aws_service = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "originCharacteristicsWsd"}}
origin_characteristics_wsd {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "origintype") (ne $v nil)}}
		origintype = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "originFailureRecoveryMethod"}}
origin_failure_recovery_method {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "recoveryMethod") (ne $v nil)}}
		recovery_method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customStatusCode") (ne $v nil)}}
		custom_status_code = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "originFailureRecoveryPolicy"}}
origin_failure_recovery_policy {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "tuningParameters") (ne $v nil)}}
		tuning_parameters = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableIPAvoidance") (ne $v nil)}}
		enable_ip_avoidance = {{$v}}
{{- end}}
{{- if and (eq $k "ipAvoidanceErrorThreshold") (ne $v nil)}}
		ip_avoidance_error_threshold = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "ipAvoidanceRetryInterval") (ne $v nil)}}
		ip_avoidance_retry_interval = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "binaryEquivalentContent") (ne $v nil)}}
		binary_equivalent_content = {{$v}}
{{- end}}
{{- if and (eq $k "originResponsivenessMonitoring") (ne $v nil)}}
		origin_responsiveness_monitoring = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "monitorOriginResponsiveness") (ne $v nil)}}
		monitor_origin_responsiveness = {{$v}}
{{- end}}
{{- if and (eq $k "originResponsivenessTimeout") (ne $v nil)}}
		origin_responsiveness_timeout = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originResponsivenessCustomTimeout") (ne $v nil)}}
		origin_responsiveness_custom_timeout = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "originResponsivenessEnableRetry") (ne $v nil)}}
		origin_responsiveness_enable_retry = {{$v}}
{{- end}}
{{- if and (eq $k "originResponsivenessEnableRecovery") (ne $v nil)}}
		origin_responsiveness_enable_recovery = {{$v}}
{{- end}}
{{- if and (eq $k "originResponsivenessRecoveryConfigName") (ne $v nil)}}
		origin_responsiveness_recovery_config_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "statusCodeMonitoring1") (ne $v nil)}}
		status_code_monitoring1 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "monitorStatusCodes1") (ne $v nil)}}
		monitor_status_codes1 = {{$v}}
{{- end}}
{{- if eq $k "monitorResponseCodes1"}}
		monitor_response_codes1 = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "monitorStatusCodes1EnableRetry") (ne $v nil)}}
		monitor_status_codes1_enable_retry = {{$v}}
{{- end}}
{{- if and (eq $k "monitorStatusCodes1EnableRecovery") (ne $v nil)}}
		monitor_status_codes1_enable_recovery = {{$v}}
{{- end}}
{{- if and (eq $k "monitorStatusCodes1RecoveryConfigName") (ne $v nil)}}
		monitor_status_codes1_recovery_config_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "statusCodeMonitoring2") (ne $v nil)}}
		status_code_monitoring2 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "monitorStatusCodes2") (ne $v nil)}}
		monitor_status_codes2 = {{$v}}
{{- end}}
{{- if eq $k "monitorResponseCodes2"}}
		monitor_response_codes2 = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "monitorStatusCodes2EnableRetry") (ne $v nil)}}
		monitor_status_codes2_enable_retry = {{$v}}
{{- end}}
{{- if and (eq $k "monitorStatusCodes2EnableRecovery") (ne $v nil)}}
		monitor_status_codes2_enable_recovery = {{$v}}
{{- end}}
{{- if and (eq $k "monitorStatusCodes2RecoveryConfigName") (ne $v nil)}}
		monitor_status_codes2_recovery_config_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "statusCodeMonitoring3") (ne $v nil)}}
		status_code_monitoring3 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "monitorStatusCodes3") (ne $v nil)}}
		monitor_status_codes3 = {{$v}}
{{- end}}
{{- if eq $k "monitorResponseCodes3"}}
		monitor_response_codes3 = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "monitorStatusCodes3EnableRetry") (ne $v nil)}}
		monitor_status_codes3_enable_retry = {{$v}}
{{- end}}
{{- if and (eq $k "monitorStatusCodes3EnableRecovery") (ne $v nil)}}
		monitor_status_codes3_enable_recovery = {{$v}}
{{- end}}
{{- if and (eq $k "monitorStatusCodes3RecoveryConfigName") (ne $v nil)}}
		monitor_status_codes3_recovery_config_name = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "originIpAcl"}}
origin_ip_acl {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enable") (ne $v nil)}}
		enable = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "persistentClientConnection"}}
persistent_client_connection {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "timeout") (ne $v nil)}}
		timeout = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "persistentConnection"}}
persistent_connection {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "timeout") (ne $v nil)}}
		timeout = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "personallyIdentifiableInformation"}}
personally_identifiable_information {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "phasedRelease"}}
phased_release {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "label") (ne $v nil)}}
		label = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationTitle") (ne $v nil)}}
		population_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationCookieType") (ne $v nil)}}
		population_cookie_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationExpirationDate") (ne $v nil)}}
		population_expiration_date = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationDuration") (ne $v nil)}}
		population_duration = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "populationRefresh") (ne $v nil)}}
		population_refresh = {{$v}}
{{- end}}
{{- if and (eq $k "failoverTitle") (ne $v nil)}}
		failover_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "failoverEnabled") (ne $v nil)}}
		failover_enabled = {{$v}}
{{- end}}
{{- if eq $k "failoverResponseCode"}}
		failover_response_code = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "failoverDuration") (ne $v nil)}}
		failover_duration = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "preconnect"}}
preconnect {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if eq $k "preconnectlist"}}
		preconnectlist = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "predictiveContentDelivery"}}
predictive_content_delivery {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "predictivePrefetching"}}
predictive_prefetching {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "accuracyTarget") (ne $v nil)}}
		accuracy_target = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "prefetch"}}
prefetch {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "prefetchable"}}
prefetchable {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "prefreshCache"}}
prefresh_cache {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "prefreshval") (ne $v nil)}}
		prefreshval = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "quality"}}
quality {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "origin_settings") (ne $v nil)}}
		origin_settings = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "country") (ne $v nil)}}
		country = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "audienceSettings") (ne $v nil)}}
		audience_settings = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "endUserLocation") (ne $v nil)}}
		end_user_location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "maximumConcurrentUsers") (ne $v nil)}}
		maximum_concurrent_users = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "contentSettings") (ne $v nil)}}
		content_settings = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "contentType") (ne $v nil)}}
		content_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "objectSize") (ne $v nil)}}
		object_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "downloadType") (ne $v nil)}}
		download_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "popularityDistribution") (ne $v nil)}}
		popularity_distribution = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "deliveryType") (ne $v nil)}}
		delivery_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "deliveryFormat") (ne $v nil)}}
		delivery_format = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "segmentDuration") (ne $v nil)}}
		segment_duration = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "catalogSize") (ne $v nil)}}
		catalog_size = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "refreshRate") (ne $v nil)}}
		refresh_rate = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "optimizeFor") (ne $v nil)}}
		optimize_for = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "quicBeta"}}
quic_beta {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "quicOfferPercentage") (ne $v nil)}}
		quic_offer_percentage = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "randomSeek"}}
random_seek {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "flv") (ne $v nil)}}
		flv = {{$v}}
{{- end}}
{{- if and (eq $k "mp4") (ne $v nil)}}
		mp4 = {{$v}}
{{- end}}
{{- if and (eq $k "maximumSize") (ne $v nil)}}
		maximum_size = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "rapid"}}
rapid {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "readTimeout"}}
read_timeout {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "realTimeReporting"}}
real_time_reporting {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "advanced") (ne $v nil)}}
		advanced = {{$v}}
{{- end}}
{{- if and (eq $k "beaconSamplingPercentage") (ne $v nil)}}
		beacon_sampling_percentage = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "realUserMonitoring"}}
real_user_monitoring {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "redirect"}}
redirect {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "mobileDefaultChoice") (ne $v nil)}}
		mobile_default_choice = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationProtocol") (ne $v nil)}}
		destination_protocol = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationHostname") (ne $v nil)}}
		destination_hostname = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationHostnameSubdomain") (ne $v nil)}}
		destination_hostname_subdomain = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationHostnameSibling") (ne $v nil)}}
		destination_hostname_sibling = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationHostnameOther") (ne $v nil)}}
		destination_hostname_other = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationPath") (ne $v nil)}}
		destination_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationPathPrefix") (ne $v nil)}}
		destination_path_prefix = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationPathSuffixStatus") (ne $v nil)}}
		destination_path_suffix_status = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationPathSuffix") (ne $v nil)}}
		destination_path_suffix = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "destinationPathOther") (ne $v nil)}}
		destination_path_other = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "queryString") (ne $v nil)}}
		query_string = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "responseCode") (ne $v nil)}}
		response_code = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "redirectplus"}}
redirectplus {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "destination") (ne $v nil)}}
		destination = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "responseCode") (ne $v nil)}}
		response_code = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "refererChecking"}}
referer_checking {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "strict") (ne $v nil)}}
		strict = {{$v}}
{{- end}}
{{- if eq $k "domains"}}
		domains = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "allowChildren") (ne $v nil)}}
		allow_children = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "removeQueryParameter"}}
remove_query_parameter {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if eq $k "parameters"}}
		parameters = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "removeVary"}}
remove_vary {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "report"}}
report {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "logHost") (ne $v nil)}}
		log_host = {{$v}}
{{- end}}
{{- if and (eq $k "logReferer") (ne $v nil)}}
		log_referer = {{$v}}
{{- end}}
{{- if and (eq $k "logUserAgent") (ne $v nil)}}
		log_user_agent = {{$v}}
{{- end}}
{{- if and (eq $k "logAcceptLanguage") (ne $v nil)}}
		log_accept_language = {{$v}}
{{- end}}
{{- if and (eq $k "logCookies") (ne $v nil)}}
		log_cookies = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "cookies"}}
		cookies = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "logCustomLogField") (ne $v nil)}}
		log_custom_log_field = {{$v}}
{{- end}}
{{- if and (eq $k "customLogField") (ne $v nil)}}
		custom_log_field = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "logEdgeIP") (ne $v nil)}}
		log_edge_ip = {{$v}}
{{- end}}
{{- if and (eq $k "logXForwardedFor") (ne $v nil)}}
		log_x_forwarded_for = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "requestControl"}}
request_control {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "enableBranded403") (ne $v nil)}}
		enable_branded403 = {{$v}}
{{- end}}
{{- if and (eq $k "branded403StatusCode") (ne $v nil)}}
		branded403_status_code = {{$v | AsInt}}
{{- end}}
{{- if eq $k "netStorage" }}
		{{- if $v}}
		net_storage {
{{- range $k, $v := $v}}
{{- if and (eq $k "cpCode") (ne $v nil)}}
		cp_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "downloadDomainName") (ne $v nil)}}
		download_domain_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "g2oToken") (ne $v nil)}}
		g2o_token = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "branded403File") (ne $v nil)}}
		branded403_file = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "branded403Url") (ne $v nil)}}
		branded403_url = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "brandedDenyCacheTtl") (ne $v nil)}}
		branded_deny_cache_ttl = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "requestTypeMarker"}}
request_type_marker {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "requestType") (ne $v nil)}}
		request_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "resourceOptimizer"}}
resource_optimizer {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "resourceOptimizerExtendedCompatibility"}}
resource_optimizer_extended_compatibility {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "enableAllFeatures") (ne $v nil)}}
		enable_all_features = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "responseCode"}}
response_code {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "statusCode") (ne $v nil)}}
		status_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "override206") (ne $v nil)}}
		override206 = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "responseCookie"}}
response_cookie {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "cookieName") (ne $v nil)}}
		cookie_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "type") (ne $v nil)}}
		type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "format") (ne $v nil)}}
		format = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "defaultDomain") (ne $v nil)}}
		default_domain = {{$v}}
{{- end}}
{{- if and (eq $k "defaultPath") (ne $v nil)}}
		default_path = {{$v}}
{{- end}}
{{- if and (eq $k "domain") (ne $v nil)}}
		domain = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "path") (ne $v nil)}}
		path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "expires") (ne $v nil)}}
		expires = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "expirationDate") (ne $v nil)}}
		expiration_date = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "duration") (ne $v nil)}}
		duration = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sameSite") (ne $v nil)}}
		same_site = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "secure") (ne $v nil)}}
		secure = {{$v}}
{{- end}}
{{- if and (eq $k "httpOnly") (ne $v nil)}}
		http_only = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "restrictObjectCaching"}}
restrict_object_caching {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "maximumSize") (ne $v nil)}}
		maximum_size = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "returnCacheStatus"}}
return_cache_status {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "responseHeaderName") (ne $v nil)}}
		response_header_name = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "rewriteUrl"}}
rewrite_url {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "behavior") (ne $v nil)}}
		behavior = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "match") (ne $v nil)}}
		match = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchRegex") (ne $v nil)}}
		match_regex = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "targetRegex") (ne $v nil)}}
		target_regex = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "targetPath") (ne $v nil)}}
		target_path = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "targetPathPrepend") (ne $v nil)}}
		target_path_prepend = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "targetUrl") (ne $v nil)}}
		target_url = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchMultiple") (ne $v nil)}}
		match_multiple = {{$v}}
{{- end}}
{{- if and (eq $k "keepQueryString") (ne $v nil)}}
		keep_query_string = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "rumCustom"}}
rum_custom {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "rumSampleRate") (ne $v nil)}}
		rum_sample_rate = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "rumGroupName") (ne $v nil)}}
		rum_group_name = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "saasDefinitions"}}
saas_definitions {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "customerTitle") (ne $v nil)}}
		customer_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customerAction") (ne $v nil)}}
		customer_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customerCnameEnabled") (ne $v nil)}}
		customer_cname_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "customerCnameLevel") (ne $v nil)}}
		customer_cname_level = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "customerCookie") (ne $v nil)}}
		customer_cookie = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customerQueryString") (ne $v nil)}}
		customer_query_string = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customerRegex") (ne $v nil)}}
		customer_regex = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customerReplace") (ne $v nil)}}
		customer_replace = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "applicationTitle") (ne $v nil)}}
		application_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "applicationAction") (ne $v nil)}}
		application_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "applicationCnameEnabled") (ne $v nil)}}
		application_cname_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "applicationCnameLevel") (ne $v nil)}}
		application_cname_level = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "applicationCookie") (ne $v nil)}}
		application_cookie = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "applicationQueryString") (ne $v nil)}}
		application_query_string = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "applicationRegex") (ne $v nil)}}
		application_regex = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "applicationReplace") (ne $v nil)}}
		application_replace = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "usersTitle") (ne $v nil)}}
		users_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "usersAction") (ne $v nil)}}
		users_action = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "usersCnameEnabled") (ne $v nil)}}
		users_cname_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "usersCnameLevel") (ne $v nil)}}
		users_cname_level = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "usersCookie") (ne $v nil)}}
		users_cookie = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "usersQueryString") (ne $v nil)}}
		users_query_string = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "usersRegex") (ne $v nil)}}
		users_regex = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "usersReplace") (ne $v nil)}}
		users_replace = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "salesForceCommerceCloudClient"}}
sales_force_commerce_cloud_client {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "connectorId") (ne $v nil)}}
		connector_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originType") (ne $v nil)}}
		origin_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sf3cOriginHost") (ne $v nil)}}
		sf3c_origin_host = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "originHostHeader") (ne $v nil)}}
		origin_host_header = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sf3cOriginHostHeader") (ne $v nil)}}
		sf3c_origin_host_header = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowOverrideOriginCacheKey") (ne $v nil)}}
		allow_override_origin_cache_key = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "salesForceCommerceCloudProvider"}}
sales_force_commerce_cloud_provider {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "salesForceCommerceCloudProviderHostHeader"}}
sales_force_commerce_cloud_provider_host_header {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "hostHeaderSource") (ne $v nil)}}
		host_header_source = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "savePostDcaProcessing"}}
save_post_dca_processing {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "scheduleInvalidation"}}
schedule_invalidation {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "start") (ne $v nil)}}
		start = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "repeat") (ne $v nil)}}
		repeat = {{$v}}
{{- end}}
{{- if and (eq $k "repeatInterval") (ne $v nil)}}
		repeat_interval = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "refreshMethod") (ne $v nil)}}
		refresh_method = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "scriptManagement"}}
script_management {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "serviceworker") (ne $v nil)}}
		serviceworker = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "timestamp") (ne $v nil)}}
		timestamp = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "segmentedContentProtection"}}
segmented_content_protection {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "tokenAuthenticationTitle") (ne $v nil)}}
		token_authentication_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "key") (ne $v nil)}}
		key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useAdvanced") (ne $v nil)}}
		use_advanced = {{$v}}
{{- end}}
{{- if and (eq $k "transitionKey") (ne $v nil)}}
		transition_key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "salt") (ne $v nil)}}
		salt = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "headerForSalt"}}
		header_for_salt = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "fieldCarryOver") (ne $v nil)}}
		field_carry_over = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sessionId") (ne $v nil)}}
		session_id = {{$v}}
{{- end}}
{{- if and (eq $k "dataPayload") (ne $v nil)}}
		data_payload = {{$v}}
{{- end}}
{{- if and (eq $k "ip") (ne $v nil)}}
		ip = {{$v}}
{{- end}}
{{- if and (eq $k "acl") (ne $v nil)}}
		acl = {{$v}}
{{- end}}
{{- if and (eq $k "tokenAuthHLSTitle") (ne $v nil)}}
		token_auth_hls_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableTokenInURI") (ne $v nil)}}
		enable_token_in_uri = {{$v}}
{{- end}}
{{- if eq $k "hlsMasterManifestFiles"}}
		hls_master_manifest_files = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "tokenRevocationTitle") (ne $v nil)}}
		token_revocation_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "tokenRevocationEnabled") (ne $v nil)}}
		token_revocation_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "revokedListId") (ne $v nil)}}
		revoked_list_id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "mediaEncryptionTitle") (ne $v nil)}}
		media_encryption_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hlsMediaEncryption") (ne $v nil)}}
		hls_media_encryption = {{$v}}
{{- end}}
{{- if and (eq $k "dashMediaEncryption") (ne $v nil)}}
		dash_media_encryption = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "segmentedMediaOptimization"}}
segmented_media_optimization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "behavior") (ne $v nil)}}
		behavior = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableUllStreaming") (ne $v nil)}}
		enable_ull_streaming = {{$v}}
{{- end}}
{{- if and (eq $k "showAdvanced") (ne $v nil)}}
		show_advanced = {{$v}}
{{- end}}
{{- if and (eq $k "liveType") (ne $v nil)}}
		live_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "startTime") (ne $v nil)}}
		start_time = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "endTime") (ne $v nil)}}
		end_time = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "dvrType") (ne $v nil)}}
		dvr_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "dvrWindow") (ne $v nil)}}
		dvr_window = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "segmentedMediaStreamingPrefetch"}}
segmented_media_streaming_prefetch {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "setVariable"}}
set_variable {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "variableName") (ne $v nil)}}
		variable_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "valueSource") (ne $v nil)}}
		value_source = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "variableValue") (ne $v nil)}}
		variable_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "extractLocation") (ne $v nil)}}
		extract_location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "certificateFieldName") (ne $v nil)}}
		certificate_field_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "headerName") (ne $v nil)}}
		header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "responseHeaderName") (ne $v nil)}}
		response_header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "setCookieName") (ne $v nil)}}
		set_cookie_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "cookieName") (ne $v nil)}}
		cookie_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "locationId") (ne $v nil)}}
		location_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "pathComponentOffset") (ne $v nil)}}
		path_component_offset = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "queryParameterName") (ne $v nil)}}
		query_parameter_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "generator") (ne $v nil)}}
		generator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "numberOfBytes") (ne $v nil)}}
		number_of_bytes = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "minRandomNumber") (ne $v nil)}}
		min_random_number = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "maxRandomNumber") (ne $v nil)}}
		max_random_number = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "transform") (ne $v nil)}}
		transform = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "operandOne") (ne $v nil)}}
		operand_one = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "algorithm") (ne $v nil)}}
		algorithm = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "encryptionKey") (ne $v nil)}}
		encryption_key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "initializationVector") (ne $v nil)}}
		initialization_vector = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "encryptionMode") (ne $v nil)}}
		encryption_mode = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "nonce") (ne $v nil)}}
		nonce = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "prependBytes") (ne $v nil)}}
		prepend_bytes = {{$v}}
{{- end}}
{{- if and (eq $k "formatString") (ne $v nil)}}
		format_string = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "paramName") (ne $v nil)}}
		param_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "separator") (ne $v nil)}}
		separator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "min") (ne $v nil)}}
		min = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "max") (ne $v nil)}}
		max = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "hmacKey") (ne $v nil)}}
		hmac_key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hmacAlgorithm") (ne $v nil)}}
		hmac_algorithm = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "ipVersion") (ne $v nil)}}
		ip_version = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "ipv6Prefix") (ne $v nil)}}
		ipv6_prefix = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "ipv4Prefix") (ne $v nil)}}
		ipv4_prefix = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "subString") (ne $v nil)}}
		sub_string = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "regex") (ne $v nil)}}
		regex = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "replacement") (ne $v nil)}}
		replacement = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "caseSensitive") (ne $v nil)}}
		case_sensitive = {{$v}}
{{- end}}
{{- if and (eq $k "globalSubstitution") (ne $v nil)}}
		global_substitution = {{$v}}
{{- end}}
{{- if and (eq $k "startIndex") (ne $v nil)}}
		start_index = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "endIndex") (ne $v nil)}}
		end_index = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "exceptChars") (ne $v nil)}}
		except_chars = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "forceChars") (ne $v nil)}}
		force_chars = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "deviceProfile") (ne $v nil)}}
		device_profile = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "shutr"}}
shutr {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "status") (ne $v nil)}}
		status = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "simulateErrorCode"}}
simulate_error_code {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "errorType") (ne $v nil)}}
		error_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "timeout") (ne $v nil)}}
		timeout = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "siteShield"}}
site_shield {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if eq $k "ssmap" }}
		{{- if $v}}
		ssmap {
{{- range $k, $v := $v}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "srmap") (ne $v nil)}}
		srmap = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "nossmap") (ne $v nil)}}
		nossmap = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "standardTLSMigration"}}
standard_tls_migration {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "migrationFrom") (ne $v nil)}}
		migration_from = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowHTTPSUpgrade") (ne $v nil)}}
		allow_https_upgrade = {{$v}}
{{- end}}
{{- if and (eq $k "allowHTTPSDowngrade") (ne $v nil)}}
		allow_https_downgrade = {{$v}}
{{- end}}
{{- if and (eq $k "migrationStartTime") (ne $v nil)}}
		migration_start_time = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "migrationDuration") (ne $v nil)}}
		migration_duration = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "cacheSharingStartTime") (ne $v nil)}}
		cache_sharing_start_time = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "cacheSharingDuration") (ne $v nil)}}
		cache_sharing_duration = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "isCertificateSNIOnly") (ne $v nil)}}
		is_certificate_sni_only = {{$v}}
{{- end}}
{{- if and (eq $k "isTieredDistributionUsed") (ne $v nil)}}
		is_tiered_distribution_used = {{$v}}
{{- end}}
{{- if and (eq $k "tdLocation") (ne $v nil)}}
		td_location = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "standardTLSMigrationOverride"}}
standard_tls_migration_override {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "info") (ne $v nil)}}
		info = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "strictHeaderParsing"}}
strict_header_parsing {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "validMode") (ne $v nil)}}
		valid_mode = {{$v}}
{{- end}}
{{- if and (eq $k "strictMode") (ne $v nil)}}
		strict_mode = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "subCustomer"}}
sub_customer {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "origin") (ne $v nil)}}
		origin = {{$v}}
{{- end}}
{{- if and (eq $k "partnerDomainSuffix") (ne $v nil)}}
		partner_domain_suffix = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "caching") (ne $v nil)}}
		caching = {{$v}}
{{- end}}
{{- if and (eq $k "referrer") (ne $v nil)}}
		referrer = {{$v}}
{{- end}}
{{- if and (eq $k "ip") (ne $v nil)}}
		ip = {{$v}}
{{- end}}
{{- if and (eq $k "geoLocation") (ne $v nil)}}
		geo_location = {{$v}}
{{- end}}
{{- if and (eq $k "refreshContent") (ne $v nil)}}
		refresh_content = {{$v}}
{{- end}}
{{- if and (eq $k "modifyPath") (ne $v nil)}}
		modify_path = {{$v}}
{{- end}}
{{- if and (eq $k "cacheKey") (ne $v nil)}}
		cache_key = {{$v}}
{{- end}}
{{- if and (eq $k "tokenAuthorization") (ne $v nil)}}
		token_authorization = {{$v}}
{{- end}}
{{- if and (eq $k "siteFailover") (ne $v nil)}}
		site_failover = {{$v}}
{{- end}}
{{- if and (eq $k "contentCompressor") (ne $v nil)}}
		content_compressor = {{$v}}
{{- end}}
{{- if and (eq $k "accessControl") (ne $v nil)}}
		access_control = {{$v}}
{{- end}}
{{- if and (eq $k "dynamicWebContent") (ne $v nil)}}
		dynamic_web_content = {{$v}}
{{- end}}
{{- if and (eq $k "onDemandVideoDelivery") (ne $v nil)}}
		on_demand_video_delivery = {{$v}}
{{- end}}
{{- if and (eq $k "largeFileDelivery") (ne $v nil)}}
		large_file_delivery = {{$v}}
{{- end}}
{{- if and (eq $k "liveVideoDelivery") (ne $v nil)}}
		live_video_delivery = {{$v}}
{{- end}}
{{- if and (eq $k "webApplicationFirewall") (ne $v nil)}}
		web_application_firewall = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "sureRoute"}}
sure_route {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "type") (ne $v nil)}}
		type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customMap") (ne $v nil)}}
		custom_map = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "testObjectUrl") (ne $v nil)}}
		test_object_url = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "srDownloadLinkTitle") (ne $v nil)}}
		sr_download_link_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "toHostStatus") (ne $v nil)}}
		to_host_status = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "toHost") (ne $v nil)}}
		to_host = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "raceStatTtl") (ne $v nil)}}
		race_stat_ttl = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "forceSslForward") (ne $v nil)}}
		force_ssl_forward = {{$v}}
{{- end}}
{{- if and (eq $k "allowFCMParentOverride") (ne $v nil)}}
		allow_fcm_parent_override = {{$v}}
{{- end}}
{{- if and (eq $k "enableCustomKey") (ne $v nil)}}
		enable_custom_key = {{$v}}
{{- end}}
{{- if and (eq $k "customStatKey") (ne $v nil)}}
		custom_stat_key = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "tcpOptimization"}}
tcp_optimization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "display") (ne $v nil)}}
		display = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "teaLeaf"}}
tea_leaf {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "limitToDynamic") (ne $v nil)}}
		limit_to_dynamic = {{$v}}
{{- end}}
{{- if and (eq $k "ibmCustomerId") (ne $v nil)}}
		ibm_customer_id = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "tieredDistribution"}}
tiered_distribution {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "tieredDistributionMap") (ne $v nil)}}
		tiered_distribution_map = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "tieredDistributionAdvanced"}}
tiered_distribution_advanced {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "method") (ne $v nil)}}
		method = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "policy") (ne $v nil)}}
		policy = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "tieredDistributionMap") (ne $v nil)}}
		tiered_distribution_map = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowall") (ne $v nil)}}
		allowall = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "tieredDistributionCustomization"}}
tiered_distribution_customization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "tier1Title") (ne $v nil)}}
		tier1_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customMapEnabled") (ne $v nil)}}
		custom_map_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "customMapName") (ne $v nil)}}
		custom_map_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "serialStart") (ne $v nil)}}
		serial_start = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "serialEnd") (ne $v nil)}}
		serial_end = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "hashAlgorithm") (ne $v nil)}}
		hash_algorithm = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "cloudwrapperMapMigrationTitle") (ne $v nil)}}
		cloudwrapper_map_migration_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "mapMigrationEnabled") (ne $v nil)}}
		map_migration_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "migrationWithinCwMapsEnabled") (ne $v nil)}}
		migration_within_cw_maps_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "location") (ne $v nil)}}
		location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "migrationStartDate") (ne $v nil)}}
		migration_start_date = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "migrationEndDate") (ne $v nil)}}
		migration_end_date = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "timeout"}}
timeout {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "uidConfiguration"}}
uid_configuration {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "legalText") (ne $v nil)}}
		legal_text = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if and (eq $k "extractLocation") (ne $v nil)}}
		extract_location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "headerName") (ne $v nil)}}
		header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "queryParameterName") (ne $v nil)}}
		query_parameter_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "variableName") (ne $v nil)}}
		variable_name = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "validateEntityTag"}}
validate_entity_tag {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "verifyJsonWebToken"}}
verify_json_web_token {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "extractLocation") (ne $v nil)}}
		extract_location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "headerName") (ne $v nil)}}
		header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "queryParameterName") (ne $v nil)}}
		query_parameter_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "jwt") (ne $v nil)}}
		jwt = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableRS256") (ne $v nil)}}
		enable_rs256 = {{$v}}
{{- end}}
{{- if and (eq $k "enableES256") (ne $v nil)}}
		enable_es256 = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "verifyJsonWebTokenForDcp"}}
verify_json_web_token_for_dcp {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "extractLocation") (ne $v nil)}}
		extract_location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "primaryLocation") (ne $v nil)}}
		primary_location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customHeader") (ne $v nil)}}
		custom_header = {{$v}}
{{- end}}
{{- if and (eq $k "headerName") (ne $v nil)}}
		header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "queryParameterName") (ne $v nil)}}
		query_parameter_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "jwt") (ne $v nil)}}
		jwt = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "extractClientId") (ne $v nil)}}
		extract_client_id = {{$v}}
{{- end}}
{{- if and (eq $k "clientId") (ne $v nil)}}
		client_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "extractAuthorizations") (ne $v nil)}}
		extract_authorizations = {{$v}}
{{- end}}
{{- if and (eq $k "authorizations") (ne $v nil)}}
		authorizations = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "extractUserName") (ne $v nil)}}
		extract_user_name = {{$v}}
{{- end}}
{{- if and (eq $k "userName") (ne $v nil)}}
		user_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "enableRS256") (ne $v nil)}}
		enable_rs256 = {{$v}}
{{- end}}
{{- if and (eq $k "enableES256") (ne $v nil)}}
		enable_es256 = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "verifyTokenAuthorization"}}
verify_token_authorization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "useAdvanced") (ne $v nil)}}
		use_advanced = {{$v}}
{{- end}}
{{- if and (eq $k "location") (ne $v nil)}}
		location = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "locationId") (ne $v nil)}}
		location_id = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "algorithm") (ne $v nil)}}
		algorithm = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "escapeHmacInputs") (ne $v nil)}}
		escape_hmac_inputs = {{$v}}
{{- end}}
{{- if and (eq $k "ignoreQueryString") (ne $v nil)}}
		ignore_query_string = {{$v}}
{{- end}}
{{- if and (eq $k "key") (ne $v nil)}}
		key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "transitionKey") (ne $v nil)}}
		transition_key = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "salt") (ne $v nil)}}
		salt = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "failureResponse") (ne $v nil)}}
		failure_response = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "virtualWaitingRoom"}}
virtual_waiting_room {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "cloudletSharedPolicy") (ne $v nil)}}
		cloudlet_shared_policy = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "domainConfig") (ne $v nil)}}
		domain_config = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customCookieDomain") (ne $v nil)}}
		custom_cookie_domain = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomTitle") (ne $v nil)}}
		waiting_room_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomPath") (ne $v nil)}}
		waiting_room_path = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "waitingRoomAssetsPaths"}}
		waiting_room_assets_paths = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "accessTitle") (ne $v nil)}}
		access_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sessionDuration") (ne $v nil)}}
		session_duration = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "sessionAutoProlong") (ne $v nil)}}
		session_auto_prolong = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "virtualWaitingRoomWithEdgeWorkers"}}
virtual_waiting_room_with_edge_workers {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- end}}
}
{{- end}}
{{- define "visitorPrioritization"}}
visitor_prioritization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- if eq $k "cloudletPolicy" }}
		{{- if $v}}
		cloudlet_policy {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "userIdentificationTitle") (ne $v nil)}}
		user_identification_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "userIdentificationByCookie") (ne $v nil)}}
		user_identification_by_cookie = {{$v}}
{{- end}}
{{- if and (eq $k "userIdentificationKeyCookie") (ne $v nil)}}
		user_identification_key_cookie = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "userIdentificationByHeaders") (ne $v nil)}}
		user_identification_by_headers = {{$v}}
{{- end}}
{{- if eq $k "userIdentificationKeyHeaders"}}
		user_identification_key_headers = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "userIdentificationByIp") (ne $v nil)}}
		user_identification_by_ip = {{$v}}
{{- end}}
{{- if and (eq $k "userIdentificationByParams") (ne $v nil)}}
		user_identification_by_params = {{$v}}
{{- end}}
{{- if eq $k "userIdentificationKeyParams"}}
		user_identification_key_params = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "allowedUserCookieManagementTitle") (ne $v nil)}}
		allowed_user_cookie_management_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowedUserCookieEnabled") (ne $v nil)}}
		allowed_user_cookie_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "allowedUserCookieLabel") (ne $v nil)}}
		allowed_user_cookie_label = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowedUserCookieDuration") (ne $v nil)}}
		allowed_user_cookie_duration = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "allowedUserCookieRefresh") (ne $v nil)}}
		allowed_user_cookie_refresh = {{$v}}
{{- end}}
{{- if and (eq $k "allowedUserCookieAdvanced") (ne $v nil)}}
		allowed_user_cookie_advanced = {{$v}}
{{- end}}
{{- if and (eq $k "allowedUserCookieAutomaticSalt") (ne $v nil)}}
		allowed_user_cookie_automatic_salt = {{$v}}
{{- end}}
{{- if and (eq $k "allowedUserCookieSalt") (ne $v nil)}}
		allowed_user_cookie_salt = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowedUserCookieDomainType") (ne $v nil)}}
		allowed_user_cookie_domain_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowedUserCookieDomain") (ne $v nil)}}
		allowed_user_cookie_domain = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "allowedUserCookieHttpOnly") (ne $v nil)}}
		allowed_user_cookie_http_only = {{$v}}
{{- end}}
{{- if and (eq $k "waitingRoomCookieManagementTitle") (ne $v nil)}}
		waiting_room_cookie_management_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomCookieEnabled") (ne $v nil)}}
		waiting_room_cookie_enabled = {{$v}}
{{- end}}
{{- if and (eq $k "waitingRoomCookieShareLabel") (ne $v nil)}}
		waiting_room_cookie_share_label = {{$v}}
{{- end}}
{{- if and (eq $k "waitingRoomCookieLabel") (ne $v nil)}}
		waiting_room_cookie_label = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomCookieDuration") (ne $v nil)}}
		waiting_room_cookie_duration = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "waitingRoomCookieAdvanced") (ne $v nil)}}
		waiting_room_cookie_advanced = {{$v}}
{{- end}}
{{- if and (eq $k "waitingRoomCookieAutomaticSalt") (ne $v nil)}}
		waiting_room_cookie_automatic_salt = {{$v}}
{{- end}}
{{- if and (eq $k "waitingRoomCookieSalt") (ne $v nil)}}
		waiting_room_cookie_salt = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomCookieDomainType") (ne $v nil)}}
		waiting_room_cookie_domain_type = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomCookieDomain") (ne $v nil)}}
		waiting_room_cookie_domain = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomCookieHttpOnly") (ne $v nil)}}
		waiting_room_cookie_http_only = {{$v}}
{{- end}}
{{- if and (eq $k "waitingRoomManagementTitle") (ne $v nil)}}
		waiting_room_management_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomStatusCode") (ne $v nil)}}
		waiting_room_status_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "waitingRoomUseCpCode") (ne $v nil)}}
		waiting_room_use_cp_code = {{$v}}
{{- end}}
{{- if eq $k "waitingRoomCpCode" }}
		{{- if $v}}
		waiting_room_cp_code {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if eq $k "waitingRoomNetStorage" }}
		{{- if $v}}
		waiting_room_net_storage {
{{- range $k, $v := $v}}
{{- if and (eq $k "cpCode") (ne $v nil)}}
		cp_code = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "downloadDomainName") (ne $v nil)}}
		download_domain_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "g2oToken") (ne $v nil)}}
		g2o_token = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- if and (eq $k "waitingRoomDirectory") (ne $v nil)}}
		waiting_room_directory = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomCacheTtl") (ne $v nil)}}
		waiting_room_cache_ttl = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "visitorPrioritizationFifo"}}
visitor_prioritization_fifo {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "cloudletSharedPolicy") (ne $v nil)}}
		cloudlet_shared_policy = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "domainConfig") (ne $v nil)}}
		domain_config = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "customCookieDomain") (ne $v nil)}}
		custom_cookie_domain = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomTitle") (ne $v nil)}}
		waiting_room_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "waitingRoomPath") (ne $v nil)}}
		waiting_room_path = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "waitingRoomAssetsPaths"}}
		waiting_room_assets_paths = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "accessTitle") (ne $v nil)}}
		access_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "sessionDuration") (ne $v nil)}}
		session_duration = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "sessionAutoProlong") (ne $v nil)}}
		session_auto_prolong = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "visitorPrioritizationFifoStandalone"}}
visitor_prioritization_fifo_standalone {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- end}}
}
{{- end}}
{{- define "watermarking"}}
watermarking {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enable") (ne $v nil)}}
		enable = {{$v}}
{{- end}}
{{- if and (eq $k "tokenSigningTitle") (ne $v nil)}}
		token_signing_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "signatureVerificationEnable") (ne $v nil)}}
		signature_verification_enable = {{$v}}
{{- end}}
{{- if and (eq $k "verificationKeyId1") (ne $v nil)}}
		verification_key_id1 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "verificationPublicKey1") (ne $v nil)}}
		verification_public_key1 = <<EOT
{{$v}}
%{~if false}trim redundant new line%{endif~}
EOT
{{- end}}
{{- if and (eq $k "verificationKeyId2") (ne $v nil)}}
		verification_key_id2 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "verificationPublicKey2") (ne $v nil)}}
		verification_public_key2 = <<EOT
{{$v}}
%{~if false}trim redundant new line%{endif~}
EOT
{{- end}}
{{- if and (eq $k "patternEncryptionTitle") (ne $v nil)}}
		pattern_encryption_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "patternDecryptionEnable") (ne $v nil)}}
		pattern_decryption_enable = {{$v}}
{{- end}}
{{- if and (eq $k "decryptionPasswordId1") (ne $v nil)}}
		decryption_password_id1 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "decryptionPassword1") (ne $v nil)}}
		decryption_password1 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "decryptionPasswordId2") (ne $v nil)}}
		decryption_password_id2 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "decryptionPassword2") (ne $v nil)}}
		decryption_password2 = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "miscellaneousSettingsTitle") (ne $v nil)}}
		miscellaneous_settings_title = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useOriginalAsA") (ne $v nil)}}
		use_original_as_a = {{$v}}
{{- end}}
{{- if and (eq $k "abVariantLocation") (ne $v nil)}}
		ab_variant_location = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "webApplicationFirewall"}}
web_application_firewall {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if eq $k "firewallConfiguration" }}
		{{- if $v}}
		firewall_configuration {
{{- range $k, $v := $v}}
{{- if and (eq $k "configId") (ne $v nil)}}
		config_id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "productionStatus") (ne $v nil)}}
		production_status = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "stagingStatus") (ne $v nil)}}
		staging_status = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "productionVersion") (ne $v nil)}}
		production_version = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "stagingVersion") (ne $v nil)}}
		staging_version = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "fileName") (ne $v nil)}}
		file_name = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "webSockets"}}
web_sockets {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "webdav"}}
webdav {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- $v := .Options}}
{{- range $k, $v := $v}}
{{- if and (eq $k "enabled") (ne $v nil)}}
		enabled = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}


{{- define "advancedImMatch"}}
{{- $v := .Options}}
advanced_im_match {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchOn") (ne $v nil)}}
		match_on = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "bucket"}}
{{- $v := .Options}}
bucket {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "percentage") (ne $v nil)}}
		percentage = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cacheability"}}
{{- $v := .Options}}
cacheability {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "chinaCdnRegion"}}
{{- $v := .Options}}
china_cdn_region {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "clientCertificate"}}
{{- $v := .Options}}
client_certificate {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "isCertificatePresent") (ne $v nil)}}
		is_certificate_present = {{$v}}
{{- end}}
{{- if and (eq $k "isCertificateValid") (ne $v nil)}}
		is_certificate_valid = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "clientIp"}}
{{- $v := .Options}}
client_ip {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "useHeaders") (ne $v nil)}}
		use_headers = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "clientIpVersion"}}
{{- $v := .Options}}
client_ip_version {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useXForwardedFor") (ne $v nil)}}
		use_x_forwarded_for = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "cloudletsOrigin"}}
{{- $v := .Options}}
cloudlets_origin {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "originId") (ne $v nil)}}
		origin_id = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "contentDeliveryNetwork"}}
{{- $v := .Options}}
content_delivery_network {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "network") (ne $v nil)}}
		network = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "contentType"}}
{{- $v := .Options}}
content_type {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "matchWildcard") (ne $v nil)}}
		match_wildcard = {{$v}}
{{- end}}
{{- if and (eq $k "matchCaseSensitive") (ne $v nil)}}
		match_case_sensitive = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "deviceCharacteristic"}}
{{- $v := .Options}}
device_characteristic {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "characteristic") (ne $v nil)}}
		characteristic = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "stringMatchOperator") (ne $v nil)}}
		string_match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "numericMatchOperator") (ne $v nil)}}
		numeric_match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "versionMatchOperator") (ne $v nil)}}
		version_match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "booleanValue") (ne $v nil)}}
		boolean_value = {{$v}}
{{- end}}
{{- if eq $k "stringValue"}}
		string_value = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "numericValue") (ne $v nil)}}
		numeric_value = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "versionValue") (ne $v nil)}}
		version_value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchCaseSensitive") (ne $v nil)}}
		match_case_sensitive = {{$v}}
{{- end}}
{{- if and (eq $k "matchWildcard") (ne $v nil)}}
		match_wildcard = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "ecmdAuthGroups"}}
{{- $v := .Options}}
ecmd_auth_groups {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "ecmdAuthScheme"}}
{{- $v := .Options}}
ecmd_auth_scheme {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "authScheme") (ne $v nil)}}
		auth_scheme = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "ecmdIsAuthenticated"}}
{{- $v := .Options}}
ecmd_is_authenticated {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "ecmdUsername"}}
{{- $v := .Options}}
ecmd_username {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "length") (ne $v nil)}}
		length = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "edgeWorkersFailure"}}
{{- $v := .Options}}
edge_workers_failure {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "execStatus") (ne $v nil)}}
		exec_status = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "fileExtension"}}
{{- $v := .Options}}
file_extension {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "matchCaseSensitive") (ne $v nil)}}
		match_case_sensitive = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "filename"}}
{{- $v := .Options}}
filename {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "matchCaseSensitive") (ne $v nil)}}
		match_case_sensitive = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "hostname"}}
{{- $v := .Options}}
hostname {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "matchAdvanced"}}
{{- $v := .Options}}
match_advanced {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "openXml") (ne $v nil)}}
		open_xml = <<EOT
{{$v}}
%{~if false}trim redundant new line%{endif~}
EOT
{{- end}}
{{- if and (eq $k "closeXml") (ne $v nil)}}
		close_xml = <<EOT
{{$v}}
%{~if false}trim redundant new line%{endif~}
EOT
{{- end}}
{{- end}}
}
{{- end}}
{{- define "matchCpCode"}}
{{- $v := .Options}}
match_cp_code {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if eq $k "value" }}
		{{- if $v}}
		value {
{{- range $k, $v := $v}}
{{- if and (eq $k "id") (ne $v nil)}}
		id = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "name") (ne $v nil)}}
		name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "createdDate") (ne $v nil)}}
		created_date = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "description") (ne $v nil)}}
		description = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "products"}}
		products = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "cpCodeLimits" }}
		{{- if $v}}
		cp_code_limits {
{{- range $k, $v := $v}}
{{- if and (eq $k "currentCapacity") (ne $v nil)}}
		current_capacity = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limit") (ne $v nil)}}
		limit = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "limitType") (ne $v nil)}}
		limit_type = "{{$v | Escape}}"
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
		}
		{{- end}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "matchResponseCode"}}
{{- $v := .Options}}
match_response_code {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "lowerBound") (ne $v nil)}}
		lower_bound = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "upperBound") (ne $v nil)}}
		upper_bound = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "matchVariable"}}
{{- $v := .Options}}
match_variable {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "variableName") (ne $v nil)}}
		variable_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "variableValues"}}
		variable_values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "variableExpression") (ne $v nil)}}
		variable_expression = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "lowerBound") (ne $v nil)}}
		lower_bound = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "upperBound") (ne $v nil)}}
		upper_bound = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchWildcard") (ne $v nil)}}
		match_wildcard = {{$v}}
{{- end}}
{{- if and (eq $k "matchCaseSensitive") (ne $v nil)}}
		match_case_sensitive = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "metadataStage"}}
{{- $v := .Options}}
metadata_stage {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "originTimeout"}}
{{- $v := .Options}}
origin_timeout {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "path"}}
{{- $v := .Options}}
path {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "matchCaseSensitive") (ne $v nil)}}
		match_case_sensitive = {{$v}}
{{- end}}
{{- if and (eq $k "normalize") (ne $v nil)}}
		normalize = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "queryStringParameter"}}
{{- $v := .Options}}
query_string_parameter {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "parameterName") (ne $v nil)}}
		parameter_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "lowerBound") (ne $v nil)}}
		lower_bound = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "upperBound") (ne $v nil)}}
		upper_bound = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "matchWildcardName") (ne $v nil)}}
		match_wildcard_name = {{$v}}
{{- end}}
{{- if and (eq $k "matchCaseSensitiveName") (ne $v nil)}}
		match_case_sensitive_name = {{$v}}
{{- end}}
{{- if and (eq $k "matchWildcardValue") (ne $v nil)}}
		match_wildcard_value = {{$v}}
{{- end}}
{{- if and (eq $k "matchCaseSensitiveValue") (ne $v nil)}}
		match_case_sensitive_value = {{$v}}
{{- end}}
{{- if and (eq $k "escapeValue") (ne $v nil)}}
		escape_value = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "random"}}
{{- $v := .Options}}
random {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "bucket") (ne $v nil)}}
		bucket = {{$v | AsInt}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "recoveryConfig"}}
{{- $v := .Options}}
recovery_config {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "configName") (ne $v nil)}}
		config_name = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "regularExpression"}}
{{- $v := .Options}}
regular_expression {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchString") (ne $v nil)}}
		match_string = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "regex") (ne $v nil)}}
		regex = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "caseSensitive") (ne $v nil)}}
		case_sensitive = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "requestCookie"}}
{{- $v := .Options}}
request_cookie {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "cookieName") (ne $v nil)}}
		cookie_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "lowerBound") (ne $v nil)}}
		lower_bound = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "upperBound") (ne $v nil)}}
		upper_bound = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "matchWildcardName") (ne $v nil)}}
		match_wildcard_name = {{$v}}
{{- end}}
{{- if and (eq $k "matchCaseSensitiveName") (ne $v nil)}}
		match_case_sensitive_name = {{$v}}
{{- end}}
{{- if and (eq $k "matchWildcardValue") (ne $v nil)}}
		match_wildcard_value = {{$v}}
{{- end}}
{{- if and (eq $k "matchCaseSensitiveValue") (ne $v nil)}}
		match_case_sensitive_value = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "requestHeader"}}
{{- $v := .Options}}
request_header {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "headerName") (ne $v nil)}}
		header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "matchWildcardName") (ne $v nil)}}
		match_wildcard_name = {{$v}}
{{- end}}
{{- if and (eq $k "matchWildcardValue") (ne $v nil)}}
		match_wildcard_value = {{$v}}
{{- end}}
{{- if and (eq $k "matchCaseSensitiveValue") (ne $v nil)}}
		match_case_sensitive_value = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "requestMethod"}}
{{- $v := .Options}}
request_method {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "requestProtocol"}}
{{- $v := .Options}}
request_protocol {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "requestType"}}
{{- $v := .Options}}
request_type {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "value") (ne $v nil)}}
		value = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "responseHeader"}}
{{- $v := .Options}}
response_header {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "headerName") (ne $v nil)}}
		header_name = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "lowerBound") (ne $v nil)}}
		lower_bound = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "upperBound") (ne $v nil)}}
		upper_bound = {{$v | AsInt}}
{{- end}}
{{- if and (eq $k "matchWildcardName") (ne $v nil)}}
		match_wildcard_name = {{$v}}
{{- end}}
{{- if and (eq $k "matchWildcardValue") (ne $v nil)}}
		match_wildcard_value = {{$v}}
{{- end}}
{{- if and (eq $k "matchCaseSensitiveValue") (ne $v nil)}}
		match_case_sensitive_value = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "time"}}
{{- $v := .Options}}
time {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "repeatInterval") (ne $v nil)}}
		repeat_interval = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "repeatDuration") (ne $v nil)}}
		repeat_duration = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "lastingDuration") (ne $v nil)}}
		lasting_duration = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "lastingDate") (ne $v nil)}}
		lasting_date = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "repeatBeginDate") (ne $v nil)}}
		repeat_begin_date = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "applyDaylightSavingsTime") (ne $v nil)}}
		apply_daylight_savings_time = {{$v}}
{{- end}}
{{- if and (eq $k "beginDate") (ne $v nil)}}
		begin_date = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "endDate") (ne $v nil)}}
		end_date = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "tokenAuthorization"}}
{{- $v := .Options}}
token_authorization {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "statusList"}}
		status_list = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "userAgent"}}
{{- $v := .Options}}
user_agent {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "values"}}
		values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "matchWildcard") (ne $v nil)}}
		match_wildcard = {{$v}}
{{- end}}
{{- if and (eq $k "matchCaseSensitive") (ne $v nil)}}
		match_case_sensitive = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "userLocation"}}
{{- $v := .Options}}
user_location {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "field") (ne $v nil)}}
		field = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "countryValues"}}
		country_values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "continentValues"}}
		continent_values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "regionValues"}}
		region_values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "checkIps") (ne $v nil)}}
		check_ips = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useOnlyFirstXForwardedForIp") (ne $v nil)}}
		use_only_first_x_forwarded_for_ip = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "userNetwork"}}
{{- $v := .Options}}
user_network {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "field") (ne $v nil)}}
		field = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if eq $k "networkTypeValues"}}
		network_type_values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "networkValues"}}
		network_values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if eq $k "bandwidthValues"}}
		bandwidth_values = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- if and (eq $k "checkIps") (ne $v nil)}}
		check_ips = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "useOnlyFirstXForwardedForIp") (ne $v nil)}}
		use_only_first_x_forwarded_for_ip = {{$v}}
{{- end}}
{{- end}}
}
{{- end}}
{{- define "variableError"}}
{{- $v := .Options}}
variable_error {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "result") (ne $v nil)}}
		result = {{$v}}
{{- end}}
{{- if eq $k "variableNames"}}
		variable_names = [{{range $v}}"{{. | Escape}}", {{end}}]
{{- end}}
{{- end}}
}
{{- end}}
{{- define "virtualWaitingRoomRequest"}}
{{- $v := .Options}}
virtual_waiting_room_request {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchOn") (ne $v nil)}}
		match_on = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}
{{- define "visitorPrioritizationRequest"}}
{{- $v := .Options}}
visitor_prioritization_request {
{{- if .UUID}}
	uuid = "{{.UUID}}"
{{- end}}
{{- if .TemplateUuid}}
	template_uuid = "{{.TemplateUuid}}"
{{- end}}
{{- if .Locked}}
	locked = {{.Locked}}
{{- end}}
{{- range $k, $v := $v}}
{{- if and (eq $k "matchOperator") (ne $v nil)}}
		match_operator = "{{$v | Escape}}"
{{- end}}
{{- if and (eq $k "matchOn") (ne $v nil)}}
		match_on = "{{$v | Escape}}"
{{- end}}
{{- end}}
}
{{- end}}

{{- range .Rules}}
data "akamai_property_rules_builder" "{{.TerraformName}}" {
	{{- $children := .Children}}
	{{- with .Rule}}
	rules_v2023_01_05 {
        name = "{{.Name | Escape}}"
        is_secure = {{.Options.IsSecure}}
        {{- if .Comments}}
        comments = "{{.Comments}}"
        {{- end}}
		{{- if .CriteriaMustSatisfy}}
        criteria_must_satisfy = "{{.CriteriaMustSatisfy}}"
        {{- end}}
        {{- if .UUID}}
        uuid = "{{.UUID}}"
        {{- end}}
        {{- if .TemplateUuid}}
        template_uuid = "{{.TemplateUuid}}"
        {{- end}}
        {{- if .TemplateLink}}
        template_link = "{{.TemplateLink}}"
        {{- end}}
        {{- if .CriteriaLocked}}
        criteria_locked = "{{.CriteriaLocked}}"
        {{- end}}
{{- range .Variables}}
        variable {
            name        = "{{.Name | Escape}}"
            description = "{{.Description | Escape}}"
            value       = "{{.Value | Escape}}"
            hidden      = {{.Hidden}}
            sensitive   = {{.Sensitive}}
        }
{{- end}}
{{- range .Criteria}}
        criterion {
{{- template "Criteria" .}}
        }
{{- end}}
{{- range .Behaviors}}
        behavior {
{{- template "Behavior" .}}
		}
{{- end}}
		{{- if $children}}
        children = [
          {{range $children}}data.akamai_property_rules_builder.{{.TerraformName}}.json,
        {{end}}]
		{{- end}}
	}
	{{- end}}
}
{{end -}}